
Servo_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e2c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005014  08005014  00015014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  080050e8  080050e8  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050e8  080050e8  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050ec  080050ec  000150ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080050f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200000c8  080051b8  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  080051b8  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc72  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a24  00000000  00000000  0002fd63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00032788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  000335d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c094  00000000  00000000  000342b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011821  00000000  00000000  00050344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f550  00000000  00000000  00061b65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001010b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  00101108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000c8 	.word	0x200000c8
 8000204:	00000000 	.word	0x00000000
 8000208:	08004ffc 	.word	0x08004ffc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000cc 	.word	0x200000cc
 8000224:	08004ffc 	.word	0x08004ffc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a16:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <MX_ADC1_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1a:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a20:	4b15      	ldr	r3, [pc, #84]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a26:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a34:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a3a:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a42:	f000 fe43 	bl	80016cc <HAL_ADC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a4c:	f000 fa44 	bl	8000ed8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000a58:	2307      	movs	r3, #7
 8000a5a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_ADC1_Init+0x74>)
 8000a62:	f001 f817 	bl	8001a94 <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a6c:	f000 fa34 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000f4 	.word	0x200000f4
 8000a7c:	40012400 	.word	0x40012400

08000a80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a28      	ldr	r2, [pc, #160]	; (8000b3c <HAL_ADC_MspInit+0xbc>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d149      	bne.n	8000b34 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aa0:	4b27      	ldr	r3, [pc, #156]	; (8000b40 <HAL_ADC_MspInit+0xc0>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a26      	ldr	r2, [pc, #152]	; (8000b40 <HAL_ADC_MspInit+0xc0>)
 8000aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_ADC_MspInit+0xc0>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_ADC_MspInit+0xc0>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a20      	ldr	r2, [pc, #128]	; (8000b40 <HAL_ADC_MspInit+0xc0>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_ADC_MspInit+0xc0>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	4619      	mov	r1, r3
 8000ade:	4819      	ldr	r0, [pc, #100]	; (8000b44 <HAL_ADC_MspInit+0xc4>)
 8000ae0:	f001 fe10 	bl	8002704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ae4:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <HAL_ADC_MspInit+0xcc>)
 8000ae8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000af8:	2280      	movs	r2, #128	; 0x80
 8000afa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b02:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b04:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000b06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b0a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000b0e:	2220      	movs	r2, #32
 8000b10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b18:	480b      	ldr	r0, [pc, #44]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000b1a:	f001 fab3 	bl	8002084 <HAL_DMA_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000b24:	f000 f9d8 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000b2c:	621a      	str	r2, [r3, #32]
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <HAL_ADC_MspInit+0xc8>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40012400 	.word	0x40012400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	20000124 	.word	0x20000124
 8000b4c:	40020008 	.word	0x40020008

08000b50 <KalmanFilter>:
    .P_Now = 0.0,
    .KG = 0.0};

/* Kalman filter */
double KalmanFilter(double rscData, KalmanFilterStructTypedef *filter)
{
 8000b50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b54:	b084      	sub	sp, #16
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
    filter->ResourceData = rscData;
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b64:	e9c1 2300 	strd	r2, r3, [r1]
    filter->X_Mid = filter->X_Last;                          // x_last=x(k-1|k-1),x_mid=x(k|k-1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000b6e:	6879      	ldr	r1, [r7, #4]
 8000b70:	e9c1 2308 	strd	r2, r3, [r1, #32]
    filter->P_Mid = filter->P_Last + filter->ProcessNoise_Q; // p_mid=p(k|k-1),p_last=p(k-1|k-1), Q=Noise
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000b80:	f7ff fb58 	bl	8000234 <__adddf3>
 8000b84:	4602      	mov	r2, r0
 8000b86:	460b      	mov	r3, r1
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    /* Five formulas of Kalman filter */
    filter->KG = filter->P_Mid / (filter->P_Mid + filter->MeasureNoise_R);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000ba0:	f7ff fb48 	bl	8000234 <__adddf3>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4620      	mov	r0, r4
 8000baa:	4629      	mov	r1, r5
 8000bac:	f7ff fe22 	bl	80007f4 <__aeabi_ddiv>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	6879      	ldr	r1, [r7, #4]
 8000bb6:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
    filter->X_Now = filter->X_Mid + filter->KG * (filter->ResourceData - filter->X_Mid);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	e9d3 8912 	ldrd	r8, r9, [r3, #72]	; 0x48
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000bd2:	f7ff fb2d 	bl	8000230 <__aeabi_dsub>
 8000bd6:	4602      	mov	r2, r0
 8000bd8:	460b      	mov	r3, r1
 8000bda:	4640      	mov	r0, r8
 8000bdc:	4649      	mov	r1, r9
 8000bde:	f7ff fcdf 	bl	80005a0 <__aeabi_dmul>
 8000be2:	4602      	mov	r2, r0
 8000be4:	460b      	mov	r3, r1
 8000be6:	4620      	mov	r0, r4
 8000be8:	4629      	mov	r1, r5
 8000bea:	f7ff fb23 	bl	8000234 <__adddf3>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    filter->P_Now = (1 - filter->KG) * filter->P_Mid;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4913      	ldr	r1, [pc, #76]	; (8000c50 <KalmanFilter+0x100>)
 8000c04:	f7ff fb14 	bl	8000230 <__aeabi_dsub>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	4619      	mov	r1, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8000c16:	f7ff fcc3 	bl	80005a0 <__aeabi_dmul>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
    filter->P_Last = filter->P_Now;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    filter->X_Last = filter->X_Now;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	e9c1 2306 	strd	r2, r3, [r1, #24]

    return filter->X_Now;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
}
 8000c42:	4610      	mov	r0, r2
 8000c44:	4619      	mov	r1, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000c4e:	bf00      	nop
 8000c50:	3ff00000 	.word	0x3ff00000

08000c54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6153      	str	r3, [r2, #20]
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_DMA_Init+0x38>)
 8000c68:	695b      	ldr	r3, [r3, #20]
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2100      	movs	r1, #0
 8000c76:	200b      	movs	r0, #11
 8000c78:	f001 f9cd 	bl	8002016 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c7c:	200b      	movs	r0, #11
 8000c7e:	f001 f9e6 	bl	800204e <HAL_NVIC_EnableIRQ>

}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000c9c:	f043 0320 	orr.w	r3, r3, #32
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0320 	and.w	r3, r3, #32
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a13      	ldr	r2, [pc, #76]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000ce0:	699b      	ldr	r3, [r3, #24]
 8000ce2:	4a07      	ldr	r2, [pc, #28]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	6193      	str	r3, [r2, #24]
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <MX_GPIO_Init+0x70>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	f003 0308 	and.w	r3, r3, #8
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

}
 8000cf6:	bf00      	nop
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40021000 	.word	0x40021000
 8000d04:	00000000 	.word	0x00000000

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000d0e:	f000 fc57 	bl	80015c0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000d12:	f000 f887 	bl	8000e24 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000d16:	f7ff ffbb 	bl	8000c90 <MX_GPIO_Init>
    MX_DMA_Init();
 8000d1a:	f7ff ff9b 	bl	8000c54 <MX_DMA_Init>
    MX_ADC1_Init();
 8000d1e:	f7ff fe71 	bl	8000a04 <MX_ADC1_Init>
    MX_TIM1_Init();
 8000d22:	f000 fa0f 	bl	8001144 <MX_TIM1_Init>
    MX_TIM8_Init();
 8000d26:	f000 fa91 	bl	800124c <MX_TIM8_Init>
    MX_USART1_UART_Init();
 8000d2a:	f000 fbad 	bl	8001488 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 2 */
    HAL_ADC_Start_DMA(&hadc1, ADC_Buf, ADC_CHANNEL_CNT);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4933      	ldr	r1, [pc, #204]	; (8000e00 <main+0xf8>)
 8000d32:	4834      	ldr	r0, [pc, #208]	; (8000e04 <main+0xfc>)
 8000d34:	f000 fdb4 	bl	80018a0 <HAL_ADC_Start_DMA>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4833      	ldr	r0, [pc, #204]	; (8000e08 <main+0x100>)
 8000d3c:	f002 fb96 	bl	800346c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000d40:	2104      	movs	r1, #4
 8000d42:	4832      	ldr	r0, [pc, #200]	; (8000e0c <main+0x104>)
 8000d44:	f002 fb92 	bl	800346c <HAL_TIM_PWM_Start>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        ADC_Cnt = ADC_Buf[0];
 8000d48:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <main+0xf8>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a30      	ldr	r2, [pc, #192]	; (8000e10 <main+0x108>)
 8000d4e:	6013      	str	r3, [r2, #0]

        double ADC_Ratio = KalmanFilter((double)ADC_Cnt / 4095, &KalmanFilter_KnobValue);
 8000d50:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <main+0x108>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fba9 	bl	80004ac <__aeabi_ui2d>
 8000d5a:	a327      	add	r3, pc, #156	; (adr r3, 8000df8 <main+0xf0>)
 8000d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d60:	f7ff fd48 	bl	80007f4 <__aeabi_ddiv>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <main+0x10c>)
 8000d6e:	f7ff feef 	bl	8000b50 <KalmanFilter>
 8000d72:	e9c7 0100 	strd	r0, r1, [r7]
        ADC_Cnt = (uint32_t)((double)((double)ADC_Ratio * Band_Time + Band_Min_Time) / 2);
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <main+0x110>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fb96 	bl	80004ac <__aeabi_ui2d>
 8000d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d84:	f7ff fc0c 	bl	80005a0 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4614      	mov	r4, r2
 8000d8e:	461d      	mov	r5, r3
 8000d90:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <main+0x114>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff fb89 	bl	80004ac <__aeabi_ui2d>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4620      	mov	r0, r4
 8000da0:	4629      	mov	r1, r5
 8000da2:	f7ff fa47 	bl	8000234 <__adddf3>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	f04f 0200 	mov.w	r2, #0
 8000db2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db6:	f7ff fd1d 	bl	80007f4 <__aeabi_ddiv>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f7ff fdff 	bl	80009c4 <__aeabi_d2uiz>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a11      	ldr	r2, [pc, #68]	; (8000e10 <main+0x108>)
 8000dca:	6013      	str	r3, [r2, #0]

        printf("ADC_Cnt is: %ld\r\n", ADC_Cnt);
 8000dcc:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <main+0x108>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4813      	ldr	r0, [pc, #76]	; (8000e20 <main+0x118>)
 8000dd4:	f003 f9b2 	bl	800413c <iprintf>

        __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ADC_Cnt);
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <main+0x100>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <main+0x108>)
 8000dde:	6812      	ldr	r2, [r2, #0]
 8000de0:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, ADC_Cnt);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <main+0x104>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <main+0x108>)
 8000de8:	6812      	ldr	r2, [r2, #0]
 8000dea:	639a      	str	r2, [r3, #56]	; 0x38
        HAL_Delay(20);
 8000dec:	2014      	movs	r0, #20
 8000dee:	f000 fc49 	bl	8001684 <HAL_Delay>
    {
 8000df2:	e7a9      	b.n	8000d48 <main+0x40>
 8000df4:	f3af 8000 	nop.w
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40affe00 	.word	0x40affe00
 8000e00:	20000168 	.word	0x20000168
 8000e04:	200000f4 	.word	0x200000f4
 8000e08:	200001b4 	.word	0x200001b4
 8000e0c:	2000016c 	.word	0x2000016c
 8000e10:	200000e4 	.word	0x200000e4
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	08005014 	.word	0x08005014

08000e24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	; 0x58
 8000e28:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2e:	2228      	movs	r2, #40	; 0x28
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f003 f97a 	bl	800412c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e48:	1d3b      	adds	r3, r7, #4
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 8000e52:	60da      	str	r2, [r3, #12]
 8000e54:	611a      	str	r2, [r3, #16]
 8000e56:	615a      	str	r2, [r3, #20]

    /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e66:	2301      	movs	r3, #1
 8000e68:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e72:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000e74:	2300      	movs	r3, #0
 8000e76:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fdd5 	bl	8002a2c <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x68>
    {
        Error_Handler();
 8000e88:	f000 f826 	bl	8000ed8 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
  */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f002 f840 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <SystemClock_Config+0x92>
    {
        Error_Handler();
 8000eb2:	f000 f811 	bl	8000ed8 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 f9cd 	bl	8003260 <HAL_RCCEx_PeriphCLKConfig>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <SystemClock_Config+0xac>
    {
        Error_Handler();
 8000ecc:	f000 f804 	bl	8000ed8 <Error_Handler>
    }
}
 8000ed0:	bf00      	nop
 8000ed2:	3758      	adds	r7, #88	; 0x58
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <HAL_MspInit+0x5c>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6193      	str	r3, [r2, #24]
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	61d3      	str	r3, [r2, #28]
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <HAL_MspInit+0x60>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_MspInit+0x60>)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <HardFault_Handler+0x4>

08000f5a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <MemManage_Handler+0x4>

08000f60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <BusFault_Handler+0x4>

08000f66 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr

08000f84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 fb5a 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA1_Channel1_IRQHandler+0x10>)
 8000fa2:	f001 f945 	bl	8002230 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000124 	.word	0x20000124

08000fb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
	}

return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	60f8      	str	r0, [r7, #12]
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	e009      	b.n	8001010 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f000 fa2d 	bl	8001464 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	3301      	adds	r3, #1
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	429a      	cmp	r2, r3
 8001016:	dbf1      	blt.n	8000ffc <_write+0x12>
	}
	return len;
 8001018:	687b      	ldr	r3, [r7, #4]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_close>:

int _close(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800102e:	4618      	mov	r0, r3
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001048:	605a      	str	r2, [r3, #4]
	return 0;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <_isatty>:

int _isatty(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr

0800106a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800106a:	b480      	push	{r7}
 800106c:	b085      	sub	sp, #20
 800106e:	af00      	add	r7, sp, #0
 8001070:	60f8      	str	r0, [r7, #12]
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
	return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800108c:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <_sbrk+0x50>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <_sbrk+0x16>
		heap_end = &end;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <_sbrk+0x50>)
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <_sbrk+0x54>)
 8001098:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <_sbrk+0x50>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <_sbrk+0x50>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	466a      	mov	r2, sp
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d907      	bls.n	80010be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80010ae:	f003 f813 	bl	80040d8 <__errno>
 80010b2:	4603      	mov	r3, r0
 80010b4:	220c      	movs	r2, #12
 80010b6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
 80010bc:	e006      	b.n	80010cc <_sbrk+0x48>
	}

	heap_end += incr;
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <_sbrk+0x50>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <_sbrk+0x50>)
 80010c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	200000e8 	.word	0x200000e8
 80010d8:	20000250 	.word	0x20000250

080010dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <SystemInit+0x5c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a14      	ldr	r2, [pc, #80]	; (8001138 <SystemInit+0x5c>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <SystemInit+0x5c>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4911      	ldr	r1, [pc, #68]	; (8001138 <SystemInit+0x5c>)
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <SystemInit+0x60>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <SystemInit+0x5c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <SystemInit+0x5c>)
 80010fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001106:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <SystemInit+0x5c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <SystemInit+0x5c>)
 800110e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001112:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <SystemInit+0x5c>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <SystemInit+0x5c>)
 800111a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800111e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <SystemInit+0x5c>)
 8001122:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001126:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SystemInit+0x64>)
 800112a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800112e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000
 800113c:	f8ff0000 	.word	0xf8ff0000
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b092      	sub	sp, #72	; 0x48
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2220      	movs	r2, #32
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f002 ffdc 	bl	800412c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <MX_TIM1_Init+0x100>)
 8001176:	4a34      	ldr	r2, [pc, #208]	; (8001248 <MX_TIM1_Init+0x104>)
 8001178:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <MX_TIM1_Init+0x100>)
 800117c:	221f      	movs	r2, #31
 800117e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <MX_TIM1_Init+0x100>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001186:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <MX_TIM1_Init+0x100>)
 8001188:	f242 720f 	movw	r2, #9999	; 0x270f
 800118c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b2d      	ldr	r3, [pc, #180]	; (8001244 <MX_TIM1_Init+0x100>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM1_Init+0x100>)
 8001196:	2200      	movs	r2, #0
 8001198:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800119a:	4b2a      	ldr	r3, [pc, #168]	; (8001244 <MX_TIM1_Init+0x100>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011a0:	4828      	ldr	r0, [pc, #160]	; (8001244 <MX_TIM1_Init+0x100>)
 80011a2:	f002 f913 	bl	80033cc <HAL_TIM_PWM_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011ac:	f7ff fe94 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b0:	2300      	movs	r3, #0
 80011b2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011bc:	4619      	mov	r1, r3
 80011be:	4821      	ldr	r0, [pc, #132]	; (8001244 <MX_TIM1_Init+0x100>)
 80011c0:	f002 fd16 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011ca:	f7ff fe85 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ce:	2360      	movs	r3, #96	; 0x60
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750;
 80011d2:	f240 23ee 	movw	r3, #750	; 0x2ee
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_TIM1_Init+0x100>)
 80011f6:	f002 f9f3 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001200:	f7ff fe6a 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM1_Init+0x100>)
 8001228:	f002 fd4e 	bl	8003cc8 <HAL_TIMEx_ConfigBreakDeadTime>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001232:	f7ff fe51 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001236:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM1_Init+0x100>)
 8001238:	f000 f8be 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 800123c:	bf00      	nop
 800123e:	3748      	adds	r7, #72	; 0x48
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001b4 	.word	0x200001b4
 8001248:	40012c00 	.word	0x40012c00

0800124c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b092      	sub	sp, #72	; 0x48
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]
 800126e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2220      	movs	r2, #32
 8001274:	2100      	movs	r1, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f002 ff58 	bl	800412c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <MX_TIM8_Init+0x100>)
 800127e:	4a34      	ldr	r2, [pc, #208]	; (8001350 <MX_TIM8_Init+0x104>)
 8001280:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 31;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <MX_TIM8_Init+0x100>)
 8001284:	221f      	movs	r2, #31
 8001286:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_TIM8_Init+0x100>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1514;
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_TIM8_Init+0x100>)
 8001290:	f240 52ea 	movw	r2, #1514	; 0x5ea
 8001294:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_TIM8_Init+0x100>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800129c:	4b2b      	ldr	r3, [pc, #172]	; (800134c <MX_TIM8_Init+0x100>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_TIM8_Init+0x100>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012a8:	4828      	ldr	r0, [pc, #160]	; (800134c <MX_TIM8_Init+0x100>)
 80012aa:	f002 f88f 	bl	80033cc <HAL_TIM_PWM_Init>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80012b4:	f7ff fe10 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b8:	2300      	movs	r3, #0
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <MX_TIM8_Init+0x100>)
 80012c8:	f002 fc92 	bl	8003bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 80012d2:	f7ff fe01 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012d6:	2360      	movs	r3, #96	; 0x60
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 750;
 80012da:	f240 23ee 	movw	r3, #750	; 0x2ee
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f8:	2204      	movs	r2, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4813      	ldr	r0, [pc, #76]	; (800134c <MX_TIM8_Init+0x100>)
 80012fe:	f002 f96f 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001308:	f7ff fde6 	bl	8000ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001320:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001324:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <MX_TIM8_Init+0x100>)
 8001330:	f002 fcca 	bl	8003cc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800133a:	f7ff fdcd 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800133e:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_TIM8_Init+0x100>)
 8001340:	f000 f83a 	bl	80013b8 <HAL_TIM_MspPostInit>

}
 8001344:	bf00      	nop
 8001346:	3748      	adds	r7, #72	; 0x48
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000016c 	.word	0x2000016c
 8001350:	40013400 	.word	0x40013400

08001354 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_TIM_PWM_MspInit+0x58>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10c      	bne.n	8001380 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800136c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001370:	6193      	str	r3, [r2, #24]
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800137e:	e010      	b.n	80013a2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM8)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_TIM_PWM_MspInit+0x60>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d10b      	bne.n	80013a2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	4a08      	ldr	r2, [pc, #32]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001390:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001394:	6193      	str	r3, [r2, #24]
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_TIM_PWM_MspInit+0x5c>)
 8001398:	699b      	ldr	r3, [r3, #24]
 800139a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40012c00 	.word	0x40012c00
 80013b0:	40021000 	.word	0x40021000
 80013b4:	40013400 	.word	0x40013400

080013b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_TIM_MspPostInit+0x98>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d119      	bne.n	800140c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_TIM_MspPostInit+0x9c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_TIM_MspPostInit+0x9c>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_TIM_MspPostInit+0x9c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	4619      	mov	r1, r3
 8001404:	4814      	ldr	r0, [pc, #80]	; (8001458 <HAL_TIM_MspPostInit+0xa0>)
 8001406:	f001 f97d 	bl	8002704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800140a:	e01c      	b.n	8001446 <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM8)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_TIM_MspPostInit+0xa4>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d117      	bne.n	8001446 <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_TIM_MspPostInit+0x9c>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <HAL_TIM_MspPostInit+0x9c>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_TIM_MspPostInit+0x9c>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <HAL_TIM_MspPostInit+0xa8>)
 8001442:	f001 f95f 	bl	8002704 <HAL_GPIO_Init>
}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40012c00 	.word	0x40012c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40010800 	.word	0x40010800
 800145c:	40013400 	.word	0x40013400
 8001460:	40011000 	.word	0x40011000

08001464 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800146c:	1d39      	adds	r1, r7, #4
 800146e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001472:	2201      	movs	r2, #1
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <__io_putchar+0x20>)
 8001476:	f002 fcc5 	bl	8003e04 <HAL_UART_Transmit>
    return ch;
 800147a:	687b      	ldr	r3, [r7, #4]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	200001fc 	.word	0x200001fc

08001488 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_USART1_UART_Init+0x50>)
 8001490:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 8001494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001498:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014ae:	220c      	movs	r2, #12
 80014b0:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f002 fc53 	bl	8003d6a <HAL_UART_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80014ca:	f7ff fd05 	bl	8000ed8 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200001fc 	.word	0x200001fc
 80014d8:	40013800 	.word	0x40013800

080014dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
    if (uartHandle->Instance == USART1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <HAL_UART_MspInit+0x8c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d131      	bne.n	8001560 <HAL_UART_MspInit+0x84>
    {
        /* USER CODE BEGIN USART1_MspInit 0 */

        /* USER CODE END USART1_MspInit 0 */
        /* USART1 clock enable */
        __HAL_RCC_USART1_CLK_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <HAL_UART_MspInit+0x90>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a1a      	ldr	r2, [pc, #104]	; (800156c <HAL_UART_MspInit+0x90>)
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_UART_MspInit+0x90>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_UART_MspInit+0x90>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_UART_MspInit+0x90>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_UART_MspInit+0x90>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	60bb      	str	r3, [r7, #8]
 800152a:	68bb      	ldr	r3, [r7, #8]
        /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
        GPIO_InitStruct.Pin = GPIO_PIN_9;
 800152c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001530:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	61fb      	str	r3, [r7, #28]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4619      	mov	r1, r3
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <HAL_UART_MspInit+0x94>)
 8001542:	f001 f8df 	bl	8002704 <HAL_GPIO_Init>

        GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154a:	613b      	str	r3, [r7, #16]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_UART_MspInit+0x94>)
 800155c:	f001 f8d2 	bl	8002704 <HAL_GPIO_Init>

        /* USER CODE BEGIN USART1_MspInit 1 */

        /* USER CODE END USART1_MspInit 1 */
    }
}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013800 	.word	0x40013800
 800156c:	40021000 	.word	0x40021000
 8001570:	40010800 	.word	0x40010800

08001574 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001574:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001576:	e003      	b.n	8001580 <LoopCopyDataInit>

08001578 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800157a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800157c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800157e:	3104      	adds	r1, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001580:	480a      	ldr	r0, [pc, #40]	; (80015ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001584:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001586:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001588:	d3f6      	bcc.n	8001578 <CopyDataInit>
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800158c:	e002      	b.n	8001594 <LoopFillZerobss>

0800158e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001590:	f842 3b04 	str.w	r3, [r2], #4

08001594 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001596:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001598:	d3f9      	bcc.n	800158e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800159a:	f7ff fd9f 	bl	80010dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159e:	f002 fda1 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015a2:	f7ff fbb1 	bl	8000d08 <main>
  bx lr
 80015a6:	4770      	bx	lr
  ldr r3, =_sidata
 80015a8:	080050f0 	.word	0x080050f0
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015b0:	200000c8 	.word	0x200000c8
  ldr r2, =_sbss
 80015b4:	200000c8 	.word	0x200000c8
  ldr r3, = _ebss
 80015b8:	20000250 	.word	0x20000250

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x28>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x28>)
 80015ca:	f043 0310 	orr.w	r3, r3, #16
 80015ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 fd15 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fc82 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fd2d 	bl	800206a <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 fcf5 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000058 	.word	0x20000058
 8001644:	20000060 	.word	0x20000060
 8001648:	2000005c 	.word	0x2000005c

0800164c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x1c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x20>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000060 	.word	0x20000060
 800166c:	2000023c 	.word	0x2000023c

08001670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <HAL_GetTick+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	2000023c 	.word	0x2000023c

08001684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fff0 	bl	8001670 <HAL_GetTick>
 8001690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169c:	d005      	beq.n	80016aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_Delay+0x44>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016aa:	bf00      	nop
 80016ac:	f7ff ffe0 	bl	8001670 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d8f7      	bhi.n	80016ac <HAL_Delay+0x28>
  {
  }
}
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000060 	.word	0x20000060

080016cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d4:	2300      	movs	r3, #0
 80016d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e0ce      	b.n	800188c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d109      	bne.n	8001710 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff f9b8 	bl	8000a80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fb09 	bl	8001d28 <ADC_ConversionStop_Disable>
 8001716:	4603      	mov	r3, r0
 8001718:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 80a9 	bne.w	800187a <HAL_ADC_Init+0x1ae>
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b00      	cmp	r3, #0
 800172c:	f040 80a5 	bne.w	800187a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001738:	f023 0302 	bic.w	r3, r3, #2
 800173c:	f043 0202 	orr.w	r2, r3, #2
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4951      	ldr	r1, [pc, #324]	; (8001894 <HAL_ADC_Init+0x1c8>)
 800174e:	428b      	cmp	r3, r1
 8001750:	d10a      	bne.n	8001768 <HAL_ADC_Init+0x9c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800175a:	d002      	beq.n	8001762 <HAL_ADC_Init+0x96>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
 8001760:	e004      	b.n	800176c <HAL_ADC_Init+0xa0>
 8001762:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001766:	e001      	b.n	800176c <HAL_ADC_Init+0xa0>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800176c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001774:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	4313      	orrs	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001784:	d003      	beq.n	800178e <HAL_ADC_Init+0xc2>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d102      	bne.n	8001794 <HAL_ADC_Init+0xc8>
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	e000      	b.n	8001796 <HAL_ADC_Init+0xca>
 8001794:	2300      	movs	r3, #0
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7d1b      	ldrb	r3, [r3, #20]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d119      	bne.n	80017d8 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	7b1b      	ldrb	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d109      	bne.n	80017c0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	035a      	lsls	r2, r3, #13
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	e00b      	b.n	80017d8 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f043 0220 	orr.w	r2, r3, #32
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_ADC_Init+0x1cc>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	68b9      	ldr	r1, [r7, #8]
 80017fc:	430b      	orrs	r3, r1
 80017fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001808:	d003      	beq.n	8001812 <HAL_ADC_Init+0x146>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d104      	bne.n	800181c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	3b01      	subs	r3, #1
 8001818:	051b      	lsls	r3, r3, #20
 800181a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	430a      	orrs	r2, r1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_ADC_Init+0x1d0>)
 8001838:	4013      	ands	r3, r2
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	429a      	cmp	r2, r3
 800183e:	d10b      	bne.n	8001858 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001856:	e018      	b.n	800188a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185c:	f023 0312 	bic.w	r3, r3, #18
 8001860:	f043 0210 	orr.w	r2, r3, #16
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001878:	e007      	b.n	800188a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187e:	f043 0210 	orr.w	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800188a:	7dfb      	ldrb	r3, [r7, #23]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40013c00 	.word	0x40013c00
 8001898:	ffe1f7fd 	.word	0xffe1f7fd
 800189c:	ff1f0efe 	.word	0xff1f0efe

080018a0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a64      	ldr	r2, [pc, #400]	; (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_ADC_Start_DMA+0x24>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a63      	ldr	r2, [pc, #396]	; (8001a4c <HAL_ADC_Start_DMA+0x1ac>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d106      	bne.n	80018d2 <HAL_ADC_Start_DMA+0x32>
 80018c4:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 80b3 	bne.w	8001a38 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_Start_DMA+0x40>
 80018dc:	2302      	movs	r3, #2
 80018de:	e0ae      	b.n	8001a3e <HAL_ADC_Start_DMA+0x19e>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f9cb 	bl	8001c84 <ADC_Enable>
 80018ee:	4603      	mov	r3, r0
 80018f0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f040 809a 	bne.w	8001a2e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a4e      	ldr	r2, [pc, #312]	; (8001a4c <HAL_ADC_Start_DMA+0x1ac>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d105      	bne.n	8001924 <HAL_ADC_Start_DMA+0x84>
 8001918:	4b4b      	ldr	r3, [pc, #300]	; (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d115      	bne.n	8001950 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001928:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193a:	2b00      	cmp	r3, #0
 800193c:	d026      	beq.n	800198c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001942:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001946:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800194e:	e01d      	b.n	800198c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001954:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d004      	beq.n	8001970 <HAL_ADC_Start_DMA+0xd0>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a38      	ldr	r2, [pc, #224]	; (8001a4c <HAL_ADC_Start_DMA+0x1ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d10d      	bne.n	800198c <HAL_ADC_Start_DMA+0xec>
 8001970:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_ADC_Start_DMA+0x1a8>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001978:	2b00      	cmp	r3, #0
 800197a:	d007      	beq.n	800198c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001984:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d006      	beq.n	80019a6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	f023 0206 	bic.w	r2, r3, #6
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a4:	e002      	b.n	80019ac <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <HAL_ADC_Start_DMA+0x1b0>)
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a24      	ldr	r2, [pc, #144]	; (8001a54 <HAL_ADC_Start_DMA+0x1b4>)
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <HAL_ADC_Start_DMA+0x1b8>)
 80019ca:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f06f 0202 	mvn.w	r2, #2
 80019d4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019e4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a18      	ldr	r0, [r3, #32]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	334c      	adds	r3, #76	; 0x4c
 80019f0:	4619      	mov	r1, r3
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f000 fbbb 	bl	8002170 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001a04:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001a08:	d108      	bne.n	8001a1c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001a18:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a1a:	e00f      	b.n	8001a3c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a2a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001a2c:	e006      	b.n	8001a3c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001a36:	e001      	b.n	8001a3c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40012400 	.word	0x40012400
 8001a4c:	40012800 	.word	0x40012800
 8001a50:	08001d9d 	.word	0x08001d9d
 8001a54:	08001e19 	.word	0x08001e19
 8001a58:	08001e35 	.word	0x08001e35

08001a5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr
	...

08001a94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADC_ConfigChannel+0x20>
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	e0dc      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1da>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b06      	cmp	r3, #6
 8001ac2:	d81c      	bhi.n	8001afe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	3b05      	subs	r3, #5
 8001ad6:	221f      	movs	r2, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	4019      	ands	r1, r3
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	3b05      	subs	r3, #5
 8001af0:	fa00 f203 	lsl.w	r2, r0, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	635a      	str	r2, [r3, #52]	; 0x34
 8001afc:	e03c      	b.n	8001b78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d81c      	bhi.n	8001b40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	3b23      	subs	r3, #35	; 0x23
 8001b18:	221f      	movs	r2, #31
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	4019      	ands	r1, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	4413      	add	r3, r2
 8001b30:	3b23      	subs	r3, #35	; 0x23
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3e:	e01b      	b.n	8001b78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	3b41      	subs	r3, #65	; 0x41
 8001b52:	221f      	movs	r2, #31
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4019      	ands	r1, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685a      	ldr	r2, [r3, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	3b41      	subs	r3, #65	; 0x41
 8001b6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b09      	cmp	r3, #9
 8001b7e:	d91c      	bls.n	8001bba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68d9      	ldr	r1, [r3, #12]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	3b1e      	subs	r3, #30
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6898      	ldr	r0, [r3, #8]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	3b1e      	subs	r3, #30
 8001bac:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	e019      	b.n	8001bee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6919      	ldr	r1, [r3, #16]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	2207      	movs	r2, #7
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	4019      	ands	r1, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	6898      	ldr	r0, [r3, #8]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	fa00 f203 	lsl.w	r2, r0, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d003      	beq.n	8001bfe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001bfa:	2b11      	cmp	r3, #17
 8001bfc:	d132      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <HAL_ADC_ConfigChannel+0x1e4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d125      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d126      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c24:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d11a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_ADC_ConfigChannel+0x1e8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <HAL_ADC_ConfigChannel+0x1ec>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	0c9a      	lsrs	r2, r3, #18
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c44:	e002      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1f9      	bne.n	8001c46 <HAL_ADC_ConfigChannel+0x1b2>
 8001c52:	e007      	b.n	8001c64 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	40012400 	.word	0x40012400
 8001c7c:	20000058 	.word	0x20000058
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d039      	beq.n	8001d16 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001cb2:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <ADC_Enable+0x9c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <ADC_Enable+0xa0>)
 8001cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cbc:	0c9b      	lsrs	r3, r3, #18
 8001cbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cc0:	e002      	b.n	8001cc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f9      	bne.n	8001cc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cce:	f7ff fccf 	bl	8001670 <HAL_GetTick>
 8001cd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001cd4:	e018      	b.n	8001d08 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001cd6:	f7ff fccb 	bl	8001670 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d911      	bls.n	8001d08 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce8:	f043 0210 	orr.w	r2, r3, #16
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e007      	b.n	8001d18 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d1df      	bne.n	8001cd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000058 	.word	0x20000058
 8001d24:	431bde83 	.word	0x431bde83

08001d28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d127      	bne.n	8001d92 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0201 	bic.w	r2, r2, #1
 8001d50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d52:	f7ff fc8d 	bl	8001670 <HAL_GetTick>
 8001d56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d58:	e014      	b.n	8001d84 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d5a:	f7ff fc89 	bl	8001670 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d90d      	bls.n	8001d84 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6c:	f043 0210 	orr.w	r2, r3, #16
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f043 0201 	orr.w	r2, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e007      	b.n	8001d94 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d0e3      	beq.n	8001d5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d127      	bne.n	8001e06 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dcc:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dd0:	d115      	bne.n	8001dfe <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d111      	bne.n	8001dfe <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d105      	bne.n	8001dfe <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	f043 0201 	orr.w	r2, r3, #1
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f7ff fe2c 	bl	8001a5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e04:	e004      	b.n	8001e10 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	4798      	blx	r3
}
 8001e10:	bf00      	nop
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff fe21 	bl	8001a6e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f043 0204 	orr.w	r2, r3, #4
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff fe10 	bl	8001a80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e60:	bf00      	nop
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	; (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	db0b      	blt.n	8001ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	f003 021f 	and.w	r2, r3, #31
 8001ee4:	4906      	ldr	r1, [pc, #24]	; (8001f00 <__NVIC_EnableIRQ+0x34>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	2001      	movs	r0, #1
 8001eee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100

08001f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	db0a      	blt.n	8001f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	490c      	ldr	r1, [pc, #48]	; (8001f50 <__NVIC_SetPriority+0x4c>)
 8001f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f22:	0112      	lsls	r2, r2, #4
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	440b      	add	r3, r1
 8001f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f2c:	e00a      	b.n	8001f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4908      	ldr	r1, [pc, #32]	; (8001f54 <__NVIC_SetPriority+0x50>)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	3b04      	subs	r3, #4
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000e100 	.word	0xe000e100
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f1c3 0307 	rsb	r3, r3, #7
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	bf28      	it	cs
 8001f76:	2304      	movcs	r3, #4
 8001f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	2b06      	cmp	r3, #6
 8001f80:	d902      	bls.n	8001f88 <NVIC_EncodePriority+0x30>
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3b03      	subs	r3, #3
 8001f86:	e000      	b.n	8001f8a <NVIC_EncodePriority+0x32>
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	43d9      	mvns	r1, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	4313      	orrs	r3, r2
         );
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3724      	adds	r7, #36	; 0x24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ff90 	bl	8001f04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff2d 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff42 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff90 	bl	8001f58 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5f 	bl	8001f04 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff35 	bl	8001ecc <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e059      	b.n	800214e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	4b2d      	ldr	r3, [pc, #180]	; (8002158 <HAL_DMA_Init+0xd4>)
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d80f      	bhi.n	80020c6 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_DMA_Init+0xd8>)
 80020ae:	4413      	add	r3, r2
 80020b0:	4a2b      	ldr	r2, [pc, #172]	; (8002160 <HAL_DMA_Init+0xdc>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	009a      	lsls	r2, r3, #2
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_DMA_Init+0xe0>)
 80020c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80020c4:	e00e      	b.n	80020e4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_DMA_Init+0xe4>)
 80020ce:	4413      	add	r3, r2
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_DMA_Init+0xdc>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	009a      	lsls	r2, r3, #2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a22      	ldr	r2, [pc, #136]	; (800216c <HAL_DMA_Init+0xe8>)
 80020e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2202      	movs	r2, #2
 80020e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020fa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002108:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002114:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002120:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	4313      	orrs	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40020407 	.word	0x40020407
 800215c:	bffdfff8 	.word	0xbffdfff8
 8002160:	cccccccd 	.word	0xcccccccd
 8002164:	40020000 	.word	0x40020000
 8002168:	bffdfbf8 	.word	0xbffdfbf8
 800216c:	40020400 	.word	0x40020400

08002170 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_DMA_Start_IT+0x20>
 800218c:	2302      	movs	r3, #2
 800218e:	e04a      	b.n	8002226 <HAL_DMA_Start_IT+0xb6>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d13a      	bne.n	8002218 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68b9      	ldr	r1, [r7, #8]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa6e 	bl	80026a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 020e 	orr.w	r2, r2, #14
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e00f      	b.n	8002206 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0204 	bic.w	r2, r2, #4
 80021f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 020a 	orr.w	r2, r2, #10
 8002204:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f042 0201 	orr.w	r2, r2, #1
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	e005      	b.n	8002224 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002220:	2302      	movs	r3, #2
 8002222:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002224:	7dfb      	ldrb	r3, [r7, #23]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80d6 	beq.w	8002406 <HAL_DMA_IRQHandler+0x1d6>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80d0 	beq.w	8002406 <HAL_DMA_IRQHandler+0x1d6>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0320 	and.w	r3, r3, #32
 8002270:	2b00      	cmp	r3, #0
 8002272:	d107      	bne.n	8002284 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0204 	bic.w	r2, r2, #4
 8002282:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	461a      	mov	r2, r3
 800228a:	4b9b      	ldr	r3, [pc, #620]	; (80024f8 <HAL_DMA_IRQHandler+0x2c8>)
 800228c:	429a      	cmp	r2, r3
 800228e:	d958      	bls.n	8002342 <HAL_DMA_IRQHandler+0x112>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a99      	ldr	r2, [pc, #612]	; (80024fc <HAL_DMA_IRQHandler+0x2cc>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d04f      	beq.n	800233a <HAL_DMA_IRQHandler+0x10a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a98      	ldr	r2, [pc, #608]	; (8002500 <HAL_DMA_IRQHandler+0x2d0>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d048      	beq.n	8002336 <HAL_DMA_IRQHandler+0x106>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a96      	ldr	r2, [pc, #600]	; (8002504 <HAL_DMA_IRQHandler+0x2d4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d040      	beq.n	8002330 <HAL_DMA_IRQHandler+0x100>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a95      	ldr	r2, [pc, #596]	; (8002508 <HAL_DMA_IRQHandler+0x2d8>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d038      	beq.n	800232a <HAL_DMA_IRQHandler+0xfa>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a93      	ldr	r2, [pc, #588]	; (800250c <HAL_DMA_IRQHandler+0x2dc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d030      	beq.n	8002324 <HAL_DMA_IRQHandler+0xf4>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a92      	ldr	r2, [pc, #584]	; (8002510 <HAL_DMA_IRQHandler+0x2e0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d028      	beq.n	800231e <HAL_DMA_IRQHandler+0xee>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a89      	ldr	r2, [pc, #548]	; (80024f8 <HAL_DMA_IRQHandler+0x2c8>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d020      	beq.n	8002318 <HAL_DMA_IRQHandler+0xe8>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a8e      	ldr	r2, [pc, #568]	; (8002514 <HAL_DMA_IRQHandler+0x2e4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d019      	beq.n	8002314 <HAL_DMA_IRQHandler+0xe4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a8c      	ldr	r2, [pc, #560]	; (8002518 <HAL_DMA_IRQHandler+0x2e8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d012      	beq.n	8002310 <HAL_DMA_IRQHandler+0xe0>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a8b      	ldr	r2, [pc, #556]	; (800251c <HAL_DMA_IRQHandler+0x2ec>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00a      	beq.n	800230a <HAL_DMA_IRQHandler+0xda>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a89      	ldr	r2, [pc, #548]	; (8002520 <HAL_DMA_IRQHandler+0x2f0>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d102      	bne.n	8002304 <HAL_DMA_IRQHandler+0xd4>
 80022fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002302:	e01b      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002308:	e018      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 800230a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800230e:	e015      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002310:	2340      	movs	r3, #64	; 0x40
 8002312:	e013      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002314:	2304      	movs	r3, #4
 8002316:	e011      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002318:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800231c:	e00e      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 800231e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002322:	e00b      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002324:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002328:	e008      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 800232a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800232e:	e005      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002334:	e002      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 8002336:	2340      	movs	r3, #64	; 0x40
 8002338:	e000      	b.n	800233c <HAL_DMA_IRQHandler+0x10c>
 800233a:	2304      	movs	r3, #4
 800233c:	4a79      	ldr	r2, [pc, #484]	; (8002524 <HAL_DMA_IRQHandler+0x2f4>)
 800233e:	6053      	str	r3, [r2, #4]
 8002340:	e057      	b.n	80023f2 <HAL_DMA_IRQHandler+0x1c2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a6d      	ldr	r2, [pc, #436]	; (80024fc <HAL_DMA_IRQHandler+0x2cc>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d04f      	beq.n	80023ec <HAL_DMA_IRQHandler+0x1bc>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6b      	ldr	r2, [pc, #428]	; (8002500 <HAL_DMA_IRQHandler+0x2d0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d048      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x1b8>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a6a      	ldr	r2, [pc, #424]	; (8002504 <HAL_DMA_IRQHandler+0x2d4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d040      	beq.n	80023e2 <HAL_DMA_IRQHandler+0x1b2>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a68      	ldr	r2, [pc, #416]	; (8002508 <HAL_DMA_IRQHandler+0x2d8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d038      	beq.n	80023dc <HAL_DMA_IRQHandler+0x1ac>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a67      	ldr	r2, [pc, #412]	; (800250c <HAL_DMA_IRQHandler+0x2dc>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d030      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x1a6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a65      	ldr	r2, [pc, #404]	; (8002510 <HAL_DMA_IRQHandler+0x2e0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d028      	beq.n	80023d0 <HAL_DMA_IRQHandler+0x1a0>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5d      	ldr	r2, [pc, #372]	; (80024f8 <HAL_DMA_IRQHandler+0x2c8>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d020      	beq.n	80023ca <HAL_DMA_IRQHandler+0x19a>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a61      	ldr	r2, [pc, #388]	; (8002514 <HAL_DMA_IRQHandler+0x2e4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d019      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x196>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a60      	ldr	r2, [pc, #384]	; (8002518 <HAL_DMA_IRQHandler+0x2e8>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d012      	beq.n	80023c2 <HAL_DMA_IRQHandler+0x192>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5e      	ldr	r2, [pc, #376]	; (800251c <HAL_DMA_IRQHandler+0x2ec>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00a      	beq.n	80023bc <HAL_DMA_IRQHandler+0x18c>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_DMA_IRQHandler+0x2f0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d102      	bne.n	80023b6 <HAL_DMA_IRQHandler+0x186>
 80023b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023b4:	e01b      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023ba:	e018      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c0:	e015      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023c2:	2340      	movs	r3, #64	; 0x40
 80023c4:	e013      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023c6:	2304      	movs	r3, #4
 80023c8:	e011      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80023ce:	e00e      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d4:	e00b      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80023da:	e008      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023e0:	e005      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023e6:	e002      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	e000      	b.n	80023ee <HAL_DMA_IRQHandler+0x1be>
 80023ec:	2304      	movs	r3, #4
 80023ee:	4a4e      	ldr	r2, [pc, #312]	; (8002528 <HAL_DMA_IRQHandler+0x2f8>)
 80023f0:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 8136 	beq.w	8002668 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002404:	e130      	b.n	8002668 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2202      	movs	r2, #2
 800240c:	409a      	lsls	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80f8 	beq.w	8002608 <HAL_DMA_IRQHandler+0x3d8>
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80f2 	beq.w	8002608 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <HAL_DMA_IRQHandler+0x21a>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 020a 	bic.w	r2, r2, #10
 8002440:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <HAL_DMA_IRQHandler+0x2c8>)
 8002452:	429a      	cmp	r2, r3
 8002454:	d973      	bls.n	800253e <HAL_DMA_IRQHandler+0x30e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a28      	ldr	r2, [pc, #160]	; (80024fc <HAL_DMA_IRQHandler+0x2cc>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d06a      	beq.n	8002536 <HAL_DMA_IRQHandler+0x306>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_DMA_IRQHandler+0x2d0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d063      	beq.n	8002532 <HAL_DMA_IRQHandler+0x302>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a25      	ldr	r2, [pc, #148]	; (8002504 <HAL_DMA_IRQHandler+0x2d4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d05b      	beq.n	800252c <HAL_DMA_IRQHandler+0x2fc>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	; (8002508 <HAL_DMA_IRQHandler+0x2d8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d038      	beq.n	80024f0 <HAL_DMA_IRQHandler+0x2c0>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a22      	ldr	r2, [pc, #136]	; (800250c <HAL_DMA_IRQHandler+0x2dc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d030      	beq.n	80024ea <HAL_DMA_IRQHandler+0x2ba>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a20      	ldr	r2, [pc, #128]	; (8002510 <HAL_DMA_IRQHandler+0x2e0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d028      	beq.n	80024e4 <HAL_DMA_IRQHandler+0x2b4>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a18      	ldr	r2, [pc, #96]	; (80024f8 <HAL_DMA_IRQHandler+0x2c8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d020      	beq.n	80024de <HAL_DMA_IRQHandler+0x2ae>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_DMA_IRQHandler+0x2e4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_DMA_IRQHandler+0x2aa>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_DMA_IRQHandler+0x2e8>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d012      	beq.n	80024d6 <HAL_DMA_IRQHandler+0x2a6>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_DMA_IRQHandler+0x2ec>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00a      	beq.n	80024d0 <HAL_DMA_IRQHandler+0x2a0>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a18      	ldr	r2, [pc, #96]	; (8002520 <HAL_DMA_IRQHandler+0x2f0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <HAL_DMA_IRQHandler+0x29a>
 80024c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c8:	e036      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ce:	e033      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d4:	e030      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024d6:	2320      	movs	r3, #32
 80024d8:	e02e      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024da:	2302      	movs	r3, #2
 80024dc:	e02c      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e2:	e029      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024e8:	e026      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ee:	e023      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f4:	e020      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 80024f6:	bf00      	nop
 80024f8:	40020080 	.word	0x40020080
 80024fc:	40020008 	.word	0x40020008
 8002500:	4002001c 	.word	0x4002001c
 8002504:	40020030 	.word	0x40020030
 8002508:	40020044 	.word	0x40020044
 800250c:	40020058 	.word	0x40020058
 8002510:	4002006c 	.word	0x4002006c
 8002514:	40020408 	.word	0x40020408
 8002518:	4002041c 	.word	0x4002041c
 800251c:	40020430 	.word	0x40020430
 8002520:	40020444 	.word	0x40020444
 8002524:	40020400 	.word	0x40020400
 8002528:	40020000 	.word	0x40020000
 800252c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002530:	e002      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 8002532:	2320      	movs	r3, #32
 8002534:	e000      	b.n	8002538 <HAL_DMA_IRQHandler+0x308>
 8002536:	2302      	movs	r3, #2
 8002538:	4a4e      	ldr	r2, [pc, #312]	; (8002674 <HAL_DMA_IRQHandler+0x444>)
 800253a:	6053      	str	r3, [r2, #4]
 800253c:	e057      	b.n	80025ee <HAL_DMA_IRQHandler+0x3be>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <HAL_DMA_IRQHandler+0x448>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d04f      	beq.n	80025e8 <HAL_DMA_IRQHandler+0x3b8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a4b      	ldr	r2, [pc, #300]	; (800267c <HAL_DMA_IRQHandler+0x44c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d048      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x3b4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a4a      	ldr	r2, [pc, #296]	; (8002680 <HAL_DMA_IRQHandler+0x450>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d040      	beq.n	80025de <HAL_DMA_IRQHandler+0x3ae>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_DMA_IRQHandler+0x454>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d038      	beq.n	80025d8 <HAL_DMA_IRQHandler+0x3a8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_DMA_IRQHandler+0x458>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d030      	beq.n	80025d2 <HAL_DMA_IRQHandler+0x3a2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a45      	ldr	r2, [pc, #276]	; (800268c <HAL_DMA_IRQHandler+0x45c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d028      	beq.n	80025cc <HAL_DMA_IRQHandler+0x39c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a44      	ldr	r2, [pc, #272]	; (8002690 <HAL_DMA_IRQHandler+0x460>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d020      	beq.n	80025c6 <HAL_DMA_IRQHandler+0x396>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a42      	ldr	r2, [pc, #264]	; (8002694 <HAL_DMA_IRQHandler+0x464>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d019      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x392>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a41      	ldr	r2, [pc, #260]	; (8002698 <HAL_DMA_IRQHandler+0x468>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d012      	beq.n	80025be <HAL_DMA_IRQHandler+0x38e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a3f      	ldr	r2, [pc, #252]	; (800269c <HAL_DMA_IRQHandler+0x46c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00a      	beq.n	80025b8 <HAL_DMA_IRQHandler+0x388>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_DMA_IRQHandler+0x470>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d102      	bne.n	80025b2 <HAL_DMA_IRQHandler+0x382>
 80025ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b0:	e01b      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b6:	e018      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025bc:	e015      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025be:	2320      	movs	r3, #32
 80025c0:	e013      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e011      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ca:	e00e      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d0:	e00b      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025d6:	e008      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025dc:	e005      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025e2:	e002      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025e4:	2320      	movs	r3, #32
 80025e6:	e000      	b.n	80025ea <HAL_DMA_IRQHandler+0x3ba>
 80025e8:	2302      	movs	r3, #2
 80025ea:	4a2e      	ldr	r2, [pc, #184]	; (80026a4 <HAL_DMA_IRQHandler+0x474>)
 80025ec:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d034      	beq.n	8002668 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002606:	e02f      	b.n	8002668 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2208      	movs	r2, #8
 800260e:	409a      	lsls	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d028      	beq.n	800266a <HAL_DMA_IRQHandler+0x43a>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d023      	beq.n	800266a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020e 	bic.w	r2, r2, #14
 8002630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
    }
  }
  return;
 8002668:	bf00      	nop
 800266a:	bf00      	nop
}
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40020400 	.word	0x40020400
 8002678:	40020008 	.word	0x40020008
 800267c:	4002001c 	.word	0x4002001c
 8002680:	40020030 	.word	0x40020030
 8002684:	40020044 	.word	0x40020044
 8002688:	40020058 	.word	0x40020058
 800268c:	4002006c 	.word	0x4002006c
 8002690:	40020080 	.word	0x40020080
 8002694:	40020408 	.word	0x40020408
 8002698:	4002041c 	.word	0x4002041c
 800269c:	40020430 	.word	0x40020430
 80026a0:	40020444 	.word	0x40020444
 80026a4:	40020000 	.word	0x40020000

080026a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d108      	bne.n	80026e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026e6:	e007      	b.n	80026f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b08b      	sub	sp, #44	; 0x2c
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002716:	e179      	b.n	8002a0c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002718:	2201      	movs	r2, #1
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	429a      	cmp	r2, r3
 8002732:	f040 8168 	bne.w	8002a06 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4aa0      	ldr	r2, [pc, #640]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d05e      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002740:	4a9e      	ldr	r2, [pc, #632]	; (80029bc <HAL_GPIO_Init+0x2b8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d875      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002746:	4a9e      	ldr	r2, [pc, #632]	; (80029c0 <HAL_GPIO_Init+0x2bc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d058      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 800274c:	4a9c      	ldr	r2, [pc, #624]	; (80029c0 <HAL_GPIO_Init+0x2bc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d86f      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002752:	4a9c      	ldr	r2, [pc, #624]	; (80029c4 <HAL_GPIO_Init+0x2c0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d052      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002758:	4a9a      	ldr	r2, [pc, #616]	; (80029c4 <HAL_GPIO_Init+0x2c0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d869      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800275e:	4a9a      	ldr	r2, [pc, #616]	; (80029c8 <HAL_GPIO_Init+0x2c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d04c      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002764:	4a98      	ldr	r2, [pc, #608]	; (80029c8 <HAL_GPIO_Init+0x2c4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d863      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800276a:	4a98      	ldr	r2, [pc, #608]	; (80029cc <HAL_GPIO_Init+0x2c8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d046      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
 8002770:	4a96      	ldr	r2, [pc, #600]	; (80029cc <HAL_GPIO_Init+0x2c8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d85d      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 8002776:	2b12      	cmp	r3, #18
 8002778:	d82a      	bhi.n	80027d0 <HAL_GPIO_Init+0xcc>
 800277a:	2b12      	cmp	r3, #18
 800277c:	d859      	bhi.n	8002832 <HAL_GPIO_Init+0x12e>
 800277e:	a201      	add	r2, pc, #4	; (adr r2, 8002784 <HAL_GPIO_Init+0x80>)
 8002780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002784:	080027ff 	.word	0x080027ff
 8002788:	080027d9 	.word	0x080027d9
 800278c:	080027eb 	.word	0x080027eb
 8002790:	0800282d 	.word	0x0800282d
 8002794:	08002833 	.word	0x08002833
 8002798:	08002833 	.word	0x08002833
 800279c:	08002833 	.word	0x08002833
 80027a0:	08002833 	.word	0x08002833
 80027a4:	08002833 	.word	0x08002833
 80027a8:	08002833 	.word	0x08002833
 80027ac:	08002833 	.word	0x08002833
 80027b0:	08002833 	.word	0x08002833
 80027b4:	08002833 	.word	0x08002833
 80027b8:	08002833 	.word	0x08002833
 80027bc:	08002833 	.word	0x08002833
 80027c0:	08002833 	.word	0x08002833
 80027c4:	08002833 	.word	0x08002833
 80027c8:	080027e1 	.word	0x080027e1
 80027cc:	080027f5 	.word	0x080027f5
 80027d0:	4a7f      	ldr	r2, [pc, #508]	; (80029d0 <HAL_GPIO_Init+0x2cc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027d6:	e02c      	b.n	8002832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	623b      	str	r3, [r7, #32]
          break;
 80027de:	e029      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	3304      	adds	r3, #4
 80027e6:	623b      	str	r3, [r7, #32]
          break;
 80027e8:	e024      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	3308      	adds	r3, #8
 80027f0:	623b      	str	r3, [r7, #32]
          break;
 80027f2:	e01f      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	330c      	adds	r3, #12
 80027fa:	623b      	str	r3, [r7, #32]
          break;
 80027fc:	e01a      	b.n	8002834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d102      	bne.n	800280c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002806:	2304      	movs	r3, #4
 8002808:	623b      	str	r3, [r7, #32]
          break;
 800280a:	e013      	b.n	8002834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002814:	2308      	movs	r3, #8
 8002816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	611a      	str	r2, [r3, #16]
          break;
 800281e:	e009      	b.n	8002834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002820:	2308      	movs	r3, #8
 8002822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	615a      	str	r2, [r3, #20]
          break;
 800282a:	e003      	b.n	8002834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800282c:	2300      	movs	r3, #0
 800282e:	623b      	str	r3, [r7, #32]
          break;
 8002830:	e000      	b.n	8002834 <HAL_GPIO_Init+0x130>
          break;
 8002832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2bff      	cmp	r3, #255	; 0xff
 8002838:	d801      	bhi.n	800283e <HAL_GPIO_Init+0x13a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_Init+0x13e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2bff      	cmp	r3, #255	; 0xff
 8002848:	d802      	bhi.n	8002850 <HAL_GPIO_Init+0x14c>
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	e002      	b.n	8002856 <HAL_GPIO_Init+0x152>
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	3b08      	subs	r3, #8
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	210f      	movs	r1, #15
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	6a39      	ldr	r1, [r7, #32]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	431a      	orrs	r2, r3
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80c1 	beq.w	8002a06 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	6193      	str	r3, [r2, #24]
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_GPIO_Init+0x2d0>)
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800289c:	4a4e      	ldr	r2, [pc, #312]	; (80029d8 <HAL_GPIO_Init+0x2d4>)
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	089b      	lsrs	r3, r3, #2
 80028a2:	3302      	adds	r3, #2
 80028a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4013      	ands	r3, r2
 80028be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a46      	ldr	r2, [pc, #280]	; (80029dc <HAL_GPIO_Init+0x2d8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d01f      	beq.n	8002908 <HAL_GPIO_Init+0x204>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a45      	ldr	r2, [pc, #276]	; (80029e0 <HAL_GPIO_Init+0x2dc>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d019      	beq.n	8002904 <HAL_GPIO_Init+0x200>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a44      	ldr	r2, [pc, #272]	; (80029e4 <HAL_GPIO_Init+0x2e0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d013      	beq.n	8002900 <HAL_GPIO_Init+0x1fc>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a43      	ldr	r2, [pc, #268]	; (80029e8 <HAL_GPIO_Init+0x2e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00d      	beq.n	80028fc <HAL_GPIO_Init+0x1f8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a42      	ldr	r2, [pc, #264]	; (80029ec <HAL_GPIO_Init+0x2e8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d007      	beq.n	80028f8 <HAL_GPIO_Init+0x1f4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a41      	ldr	r2, [pc, #260]	; (80029f0 <HAL_GPIO_Init+0x2ec>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d101      	bne.n	80028f4 <HAL_GPIO_Init+0x1f0>
 80028f0:	2305      	movs	r3, #5
 80028f2:	e00a      	b.n	800290a <HAL_GPIO_Init+0x206>
 80028f4:	2306      	movs	r3, #6
 80028f6:	e008      	b.n	800290a <HAL_GPIO_Init+0x206>
 80028f8:	2304      	movs	r3, #4
 80028fa:	e006      	b.n	800290a <HAL_GPIO_Init+0x206>
 80028fc:	2303      	movs	r3, #3
 80028fe:	e004      	b.n	800290a <HAL_GPIO_Init+0x206>
 8002900:	2302      	movs	r3, #2
 8002902:	e002      	b.n	800290a <HAL_GPIO_Init+0x206>
 8002904:	2301      	movs	r3, #1
 8002906:	e000      	b.n	800290a <HAL_GPIO_Init+0x206>
 8002908:	2300      	movs	r3, #0
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	f002 0203 	and.w	r2, r2, #3
 8002910:	0092      	lsls	r2, r2, #2
 8002912:	4093      	lsls	r3, r2
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800291a:	492f      	ldr	r1, [pc, #188]	; (80029d8 <HAL_GPIO_Init+0x2d4>)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	089b      	lsrs	r3, r3, #2
 8002920:	3302      	adds	r3, #2
 8002922:	68fa      	ldr	r2, [r7, #12]
 8002924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d006      	beq.n	8002942 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002934:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	492e      	ldr	r1, [pc, #184]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	4313      	orrs	r3, r2
 800293e:	600b      	str	r3, [r1, #0]
 8002940:	e006      	b.n	8002950 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002942:	4b2c      	ldr	r3, [pc, #176]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	43db      	mvns	r3, r3
 800294a:	492a      	ldr	r1, [pc, #168]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 800294c:	4013      	ands	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d006      	beq.n	800296a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800295c:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	4924      	ldr	r1, [pc, #144]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800296a:	4b22      	ldr	r3, [pc, #136]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	43db      	mvns	r3, r3
 8002972:	4920      	ldr	r1, [pc, #128]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 8002974:	4013      	ands	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d006      	beq.n	8002992 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002992:	4b18      	ldr	r3, [pc, #96]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	43db      	mvns	r3, r3
 800299a:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 800299c:	4013      	ands	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d025      	beq.n	80029f8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	4910      	ldr	r1, [pc, #64]	; (80029f4 <HAL_GPIO_Init+0x2f0>)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
 80029b8:	e025      	b.n	8002a06 <HAL_GPIO_Init+0x302>
 80029ba:	bf00      	nop
 80029bc:	10320000 	.word	0x10320000
 80029c0:	10310000 	.word	0x10310000
 80029c4:	10220000 	.word	0x10220000
 80029c8:	10210000 	.word	0x10210000
 80029cc:	10120000 	.word	0x10120000
 80029d0:	10110000 	.word	0x10110000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	40010000 	.word	0x40010000
 80029dc:	40010800 	.word	0x40010800
 80029e0:	40010c00 	.word	0x40010c00
 80029e4:	40011000 	.word	0x40011000
 80029e8:	40011400 	.word	0x40011400
 80029ec:	40011800 	.word	0x40011800
 80029f0:	40011c00 	.word	0x40011c00
 80029f4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029f8:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_GPIO_Init+0x324>)
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	4909      	ldr	r1, [pc, #36]	; (8002a28 <HAL_GPIO_Init+0x324>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	3301      	adds	r3, #1
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	fa22 f303 	lsr.w	r3, r2, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f ae7e 	bne.w	8002718 <HAL_GPIO_Init+0x14>
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	372c      	adds	r7, #44	; 0x2c
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40010400 	.word	0x40010400

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e26c      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8087 	beq.w	8002b5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d00c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a58:	4b8f      	ldr	r3, [pc, #572]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d112      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
 8002a64:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d06c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x12c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d168      	bne.n	8002b58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e246      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x76>
 8002a94:	4b80      	ldr	r3, [pc, #512]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a7f      	ldr	r2, [pc, #508]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	e02e      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x98>
 8002aaa:	4b7b      	ldr	r3, [pc, #492]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a7a      	ldr	r2, [pc, #488]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a77      	ldr	r2, [pc, #476]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	e01d      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0xbc>
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a71      	ldr	r2, [pc, #452]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a6e      	ldr	r2, [pc, #440]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e00b      	b.n	8002b00 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a6a      	ldr	r2, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a67      	ldr	r2, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002afe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d013      	beq.n	8002b30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b08:	f7fe fdb2 	bl	8001670 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b10:	f7fe fdae 	bl	8001670 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b64      	cmp	r3, #100	; 0x64
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e1fa      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b22:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f0      	beq.n	8002b10 <HAL_RCC_OscConfig+0xe4>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fd9e 	bl	8001670 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fd9a 	bl	8001670 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	; 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e1e6      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4a:	4b53      	ldr	r3, [pc, #332]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x10c>
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b66:	4b4c      	ldr	r3, [pc, #304]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b72:	4b49      	ldr	r3, [pc, #292]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	2b08      	cmp	r3, #8
 8002b7c:	d11c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
 8002b7e:	4b46      	ldr	r3, [pc, #280]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8a:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e1ba      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba2:	4b3d      	ldr	r3, [pc, #244]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4939      	ldr	r1, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb6:	e03a      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d020      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc0:	4b36      	ldr	r3, [pc, #216]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7fe fd53 	bl	8001670 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bce:	f7fe fd4f 	bl	8001670 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e19b      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4927      	ldr	r1, [pc, #156]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	600b      	str	r3, [r1, #0]
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <HAL_RCC_OscConfig+0x270>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fd32 	bl	8001670 <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c10:	f7fe fd2e 	bl	8001670 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e17a      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1f0      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03a      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d019      	beq.n	8002c76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fd12 	bl	8001670 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c50:	f7fe fd0e 	bl	8001670 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e15a      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d0f0      	beq.n	8002c50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c6e:	2001      	movs	r0, #1
 8002c70:	f000 fad8 	bl	8003224 <RCC_Delay>
 8002c74:	e01c      	b.n	8002cb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c76:	4b0a      	ldr	r3, [pc, #40]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7c:	f7fe fcf8 	bl	8001670 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c82:	e00f      	b.n	8002ca4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c84:	f7fe fcf4 	bl	8001670 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d908      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e140      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	42420000 	.word	0x42420000
 8002ca0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	4b9e      	ldr	r3, [pc, #632]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1e9      	bne.n	8002c84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 80a6 	beq.w	8002e0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cc2:	4b97      	ldr	r3, [pc, #604]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10d      	bne.n	8002cea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b94      	ldr	r3, [pc, #592]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a93      	ldr	r2, [pc, #588]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b91      	ldr	r3, [pc, #580]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	4b8e      	ldr	r3, [pc, #568]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d118      	bne.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a8a      	ldr	r2, [pc, #552]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fcb5 	bl	8001670 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0a:	f7fe fcb1 	bl	8001670 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b64      	cmp	r3, #100	; 0x64
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e0fd      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	4b81      	ldr	r3, [pc, #516]	; (8002f24 <HAL_RCC_OscConfig+0x4f8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d106      	bne.n	8002d3e <HAL_RCC_OscConfig+0x312>
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	4a7a      	ldr	r2, [pc, #488]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d36:	f043 0301 	orr.w	r3, r3, #1
 8002d3a:	6213      	str	r3, [r2, #32]
 8002d3c:	e02d      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x334>
 8002d46:	4b76      	ldr	r3, [pc, #472]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6213      	str	r3, [r2, #32]
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	4a72      	ldr	r2, [pc, #456]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6213      	str	r3, [r2, #32]
 8002d5e:	e01c      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b05      	cmp	r3, #5
 8002d66:	d10c      	bne.n	8002d82 <HAL_RCC_OscConfig+0x356>
 8002d68:	4b6d      	ldr	r3, [pc, #436]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	4a6c      	ldr	r2, [pc, #432]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d6e:	f043 0304 	orr.w	r3, r3, #4
 8002d72:	6213      	str	r3, [r2, #32]
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	4a69      	ldr	r2, [pc, #420]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	6213      	str	r3, [r2, #32]
 8002d80:	e00b      	b.n	8002d9a <HAL_RCC_OscConfig+0x36e>
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4a66      	ldr	r2, [pc, #408]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6213      	str	r3, [r2, #32]
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	f023 0304 	bic.w	r3, r3, #4
 8002d98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d015      	beq.n	8002dce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fc65 	bl	8001670 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	e00a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002daa:	f7fe fc61 	bl	8001670 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e0ab      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	4b57      	ldr	r3, [pc, #348]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ee      	beq.n	8002daa <HAL_RCC_OscConfig+0x37e>
 8002dcc:	e014      	b.n	8002df8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dce:	f7fe fc4f 	bl	8001670 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fe fc4b 	bl	8001670 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e095      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1ee      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a47      	ldr	r2, [pc, #284]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8081 	beq.w	8002f16 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e14:	4b42      	ldr	r3, [pc, #264]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d061      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d146      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e28:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fe fc1f 	bl	8001670 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e36:	f7fe fc1b 	bl	8001670 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e067      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e48:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1f0      	bne.n	8002e36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	492d      	ldr	r1, [pc, #180]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a19      	ldr	r1, [r3, #32]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e80:	430b      	orrs	r3, r1
 8002e82:	4927      	ldr	r1, [pc, #156]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8e:	f7fe fbef 	bl	8001670 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e96:	f7fe fbeb 	bl	8001670 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e037      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0f0      	beq.n	8002e96 <HAL_RCC_OscConfig+0x46a>
 8002eb4:	e02f      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb6:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_RCC_OscConfig+0x4fc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fe fbd8 	bl	8001670 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7fe fbd4 	bl	8001670 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e020      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x498>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69db      	ldr	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e013      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x4f4>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d001      	beq.n	8002f16 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	40007000 	.word	0x40007000
 8002f28:	42420060 	.word	0x42420060

08002f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0d0      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d910      	bls.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b67      	ldr	r3, [pc, #412]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f023 0207 	bic.w	r2, r3, #7
 8002f56:	4965      	ldr	r1, [pc, #404]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5e:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	683a      	ldr	r2, [r7, #0]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d001      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0b8      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d020      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f88:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002faa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fac:	4b50      	ldr	r3, [pc, #320]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	494d      	ldr	r1, [pc, #308]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d040      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd2:	4b47      	ldr	r3, [pc, #284]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e07f      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fea:	4b41      	ldr	r3, [pc, #260]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e073      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b3d      	ldr	r3, [pc, #244]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e06b      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800300a:	4b39      	ldr	r3, [pc, #228]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f023 0203 	bic.w	r2, r3, #3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	4936      	ldr	r1, [pc, #216]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fe fb28 	bl	8001670 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	e00a      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003024:	f7fe fb24 	bl	8001670 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e053      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b2d      	ldr	r3, [pc, #180]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 020c 	and.w	r2, r3, #12
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1eb      	bne.n	8003024 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d210      	bcs.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b24      	ldr	r3, [pc, #144]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4922      	ldr	r1, [pc, #136]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e032      	b.n	80030e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b19      	ldr	r3, [pc, #100]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4916      	ldr	r1, [pc, #88]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a6:	4b12      	ldr	r3, [pc, #72]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490e      	ldr	r1, [pc, #56]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ba:	f000 f821 	bl	8003100 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <HAL_RCC_ClockConfig+0x1c4>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490a      	ldr	r1, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	fa22 f303 	lsr.w	r3, r2, r3
 80030d2:	4a09      	ldr	r2, [pc, #36]	; (80030f8 <HAL_RCC_ClockConfig+0x1cc>)
 80030d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d6:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_RCC_ClockConfig+0x1d0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fe fa86 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	08005038 	.word	0x08005038
 80030f8:	20000058 	.word	0x20000058
 80030fc:	2000005c 	.word	0x2000005c

08003100 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003100:	b490      	push	{r4, r7}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003106:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003108:	1d3c      	adds	r4, r7, #4
 800310a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800310c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003110:	f240 2301 	movw	r3, #513	; 0x201
 8003114:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
 800311e:	2300      	movs	r3, #0
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800312a:	4b22      	ldr	r3, [pc, #136]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f003 030c 	and.w	r3, r3, #12
 8003136:	2b04      	cmp	r3, #4
 8003138:	d002      	beq.n	8003140 <HAL_RCC_GetSysClockFreq+0x40>
 800313a:	2b08      	cmp	r3, #8
 800313c:	d003      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x46>
 800313e:	e02d      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003140:	4b1d      	ldr	r3, [pc, #116]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003142:	623b      	str	r3, [r7, #32]
      break;
 8003144:	e02d      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003152:	4413      	add	r3, r2
 8003154:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003158:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c5b      	lsrs	r3, r3, #17
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003172:	4413      	add	r3, r2
 8003174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003178:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800317e:	fb02 f203 	mul.w	r2, r2, r3
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	623b      	str	r3, [r7, #32]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800319e:	623b      	str	r3, [r7, #32]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	6a3b      	ldr	r3, [r7, #32]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3728      	adds	r7, #40	; 0x28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc90      	pop	{r4, r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	08005028 	.word	0x08005028
 80031b4:	40021000 	.word	0x40021000
 80031b8:	007a1200 	.word	0x007a1200
 80031bc:	003d0900 	.word	0x003d0900

080031c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c4:	4b02      	ldr	r3, [pc, #8]	; (80031d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	20000058 	.word	0x20000058

080031d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031d8:	f7ff fff2 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	0a1b      	lsrs	r3, r3, #8
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	; (80031f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	08005048 	.word	0x08005048

080031fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003200:	f7ff ffde 	bl	80031c0 <HAL_RCC_GetHCLKFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	0adb      	lsrs	r3, r3, #11
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	4903      	ldr	r1, [pc, #12]	; (8003220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003218:	4618      	mov	r0, r3
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	08005048 	.word	0x08005048

08003224 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800322c:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <RCC_Delay+0x34>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a0a      	ldr	r2, [pc, #40]	; (800325c <RCC_Delay+0x38>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0a5b      	lsrs	r3, r3, #9
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003240:	bf00      	nop
  }
  while (Delay --);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1e5a      	subs	r2, r3, #1
 8003246:	60fa      	str	r2, [r7, #12]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f9      	bne.n	8003240 <RCC_Delay+0x1c>
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	bc80      	pop	{r7}
 8003256:	4770      	bx	lr
 8003258:	20000058 	.word	0x20000058
 800325c:	10624dd3 	.word	0x10624dd3

08003260 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	d07d      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003280:	4b4f      	ldr	r3, [pc, #316]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10d      	bne.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003296:	61d3      	str	r3, [r2, #28]
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	60bb      	str	r3, [r7, #8]
 80032a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a4:	2301      	movs	r3, #1
 80032a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b46      	ldr	r3, [pc, #280]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d118      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b4:	4b43      	ldr	r3, [pc, #268]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a42      	ldr	r2, [pc, #264]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c0:	f7fe f9d6 	bl	8001670 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	e008      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c8:	f7fe f9d2 	bl	8001670 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	; 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e06d      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b3a      	ldr	r3, [pc, #232]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0f0      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032e6:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02e      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	429a      	cmp	r2, r3
 8003302:	d027      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003304:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800330c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330e:	4b2e      	ldr	r3, [pc, #184]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800331a:	4a29      	ldr	r2, [pc, #164]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d014      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332a:	f7fe f9a1 	bl	8001670 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003330:	e00a      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003332:	f7fe f99d 	bl	8001670 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003340:	4293      	cmp	r3, r2
 8003342:	d901      	bls.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e036      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003348:	4b1d      	ldr	r3, [pc, #116]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0ee      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003354:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	4917      	ldr	r1, [pc, #92]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	4313      	orrs	r3, r2
 8003364:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003366:	7dfb      	ldrb	r3, [r7, #23]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003376:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	490b      	ldr	r1, [pc, #44]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	4904      	ldr	r1, [pc, #16]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42420440 	.word	0x42420440

080033cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e041      	b.n	8003462 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d106      	bne.n	80033f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fd ffae 	bl	8001354 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2202      	movs	r2, #2
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3304      	adds	r3, #4
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f000 f9a6 	bl	800375c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d109      	bne.n	8003490 <HAL_TIM_PWM_Start+0x24>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	bf14      	ite	ne
 8003488:	2301      	movne	r3, #1
 800348a:	2300      	moveq	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e022      	b.n	80034d6 <HAL_TIM_PWM_Start+0x6a>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b04      	cmp	r3, #4
 8003494:	d109      	bne.n	80034aa <HAL_TIM_PWM_Start+0x3e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	bf14      	ite	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	2300      	moveq	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	e015      	b.n	80034d6 <HAL_TIM_PWM_Start+0x6a>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d109      	bne.n	80034c4 <HAL_TIM_PWM_Start+0x58>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	bf14      	ite	ne
 80034bc:	2301      	movne	r3, #1
 80034be:	2300      	moveq	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e008      	b.n	80034d6 <HAL_TIM_PWM_Start+0x6a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e072      	b.n	80035c4 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <HAL_TIM_PWM_Start+0x82>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ec:	e013      	b.n	8003516 <HAL_TIM_PWM_Start+0xaa>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d104      	bne.n	80034fe <HAL_TIM_PWM_Start+0x92>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034fc:	e00b      	b.n	8003516 <HAL_TIM_PWM_Start+0xaa>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start+0xa2>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2202      	movs	r2, #2
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350c:	e003      	b.n	8003516 <HAL_TIM_PWM_Start+0xaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2201      	movs	r2, #1
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fb42 	bl	8003ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a28      	ldr	r2, [pc, #160]	; (80035cc <HAL_TIM_PWM_Start+0x160>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_PWM_Start+0xcc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a27      	ldr	r2, [pc, #156]	; (80035d0 <HAL_TIM_PWM_Start+0x164>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_TIM_PWM_Start+0xd0>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_TIM_PWM_Start+0xd2>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003550:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1d      	ldr	r2, [pc, #116]	; (80035cc <HAL_TIM_PWM_Start+0x160>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d018      	beq.n	800358e <HAL_TIM_PWM_Start+0x122>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_TIM_PWM_Start+0x164>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <HAL_TIM_PWM_Start+0x122>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d00e      	beq.n	800358e <HAL_TIM_PWM_Start+0x122>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_TIM_PWM_Start+0x168>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d009      	beq.n	800358e <HAL_TIM_PWM_Start+0x122>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_TIM_PWM_Start+0x16c>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_TIM_PWM_Start+0x122>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a14      	ldr	r2, [pc, #80]	; (80035dc <HAL_TIM_PWM_Start+0x170>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2b06      	cmp	r3, #6
 800359e:	d010      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	e007      	b.n	80035c2 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f042 0201 	orr.w	r2, r2, #1
 80035c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40012c00 	.word	0x40012c00
 80035d0:	40013400 	.word	0x40013400
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00

080035e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0ac      	b.n	8003754 <HAL_TIM_PWM_ConfigChannel+0x174>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	f200 809f 	bhi.w	8003748 <HAL_TIM_PWM_ConfigChannel+0x168>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003645 	.word	0x08003645
 8003614:	08003749 	.word	0x08003749
 8003618:	08003749 	.word	0x08003749
 800361c:	08003749 	.word	0x08003749
 8003620:	08003685 	.word	0x08003685
 8003624:	08003749 	.word	0x08003749
 8003628:	08003749 	.word	0x08003749
 800362c:	08003749 	.word	0x08003749
 8003630:	080036c7 	.word	0x080036c7
 8003634:	08003749 	.word	0x08003749
 8003638:	08003749 	.word	0x08003749
 800363c:	08003749 	.word	0x08003749
 8003640:	08003707 	.word	0x08003707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 f900 	bl	8003850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0208 	orr.w	r2, r2, #8
 800365e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	619a      	str	r2, [r3, #24]
      break;
 8003682:	e062      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f950 	bl	8003930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800369e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
      break;
 80036c4:	e041      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 f9a3 	bl	8003a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0208 	orr.w	r2, r2, #8
 80036e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0204 	bic.w	r2, r2, #4
 80036f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69d9      	ldr	r1, [r3, #28]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	61da      	str	r2, [r3, #28]
      break;
 8003704:	e021      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f9f7 	bl	8003b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69d9      	ldr	r1, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	021a      	lsls	r2, r3, #8
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	61da      	str	r2, [r3, #28]
      break;
 8003746:	e000      	b.n	800374a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003748:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3710      	adds	r7, #16
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a33      	ldr	r2, [pc, #204]	; (800383c <TIM_Base_SetConfig+0xe0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d013      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a32      	ldr	r2, [pc, #200]	; (8003840 <TIM_Base_SetConfig+0xe4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00f      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003782:	d00b      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2f      	ldr	r2, [pc, #188]	; (8003844 <TIM_Base_SetConfig+0xe8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a2e      	ldr	r2, [pc, #184]	; (8003848 <TIM_Base_SetConfig+0xec>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d003      	beq.n	800379c <TIM_Base_SetConfig+0x40>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a2d      	ldr	r2, [pc, #180]	; (800384c <TIM_Base_SetConfig+0xf0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d108      	bne.n	80037ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a22      	ldr	r2, [pc, #136]	; (800383c <TIM_Base_SetConfig+0xe0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d013      	beq.n	80037de <TIM_Base_SetConfig+0x82>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a21      	ldr	r2, [pc, #132]	; (8003840 <TIM_Base_SetConfig+0xe4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d00f      	beq.n	80037de <TIM_Base_SetConfig+0x82>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c4:	d00b      	beq.n	80037de <TIM_Base_SetConfig+0x82>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <TIM_Base_SetConfig+0xe8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d007      	beq.n	80037de <TIM_Base_SetConfig+0x82>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <TIM_Base_SetConfig+0xec>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d003      	beq.n	80037de <TIM_Base_SetConfig+0x82>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1c      	ldr	r2, [pc, #112]	; (800384c <TIM_Base_SetConfig+0xf0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d108      	bne.n	80037f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a09      	ldr	r2, [pc, #36]	; (800383c <TIM_Base_SetConfig+0xe0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0xc8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a08      	ldr	r2, [pc, #32]	; (8003840 <TIM_Base_SetConfig+0xe4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d103      	bne.n	800382c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	615a      	str	r2, [r3, #20]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40013400 	.word	0x40013400
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00

08003850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0303 	bic.w	r3, r3, #3
 8003886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 0302 	bic.w	r3, r3, #2
 8003898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a20      	ldr	r2, [pc, #128]	; (8003928 <TIM_OC1_SetConfig+0xd8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d003      	beq.n	80038b4 <TIM_OC1_SetConfig+0x64>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <TIM_OC1_SetConfig+0xdc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0308 	bic.w	r3, r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a15      	ldr	r2, [pc, #84]	; (8003928 <TIM_OC1_SetConfig+0xd8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d003      	beq.n	80038de <TIM_OC1_SetConfig+0x8e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a14      	ldr	r2, [pc, #80]	; (800392c <TIM_OC1_SetConfig+0xdc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40013400 	.word	0x40013400

08003930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	f023 0210 	bic.w	r2, r3, #16
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800395e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	4313      	orrs	r3, r2
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <TIM_OC2_SetConfig+0xe0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_OC2_SetConfig+0x68>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <TIM_OC2_SetConfig+0xe4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d10d      	bne.n	80039b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <TIM_OC2_SetConfig+0xe0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC2_SetConfig+0x94>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <TIM_OC2_SetConfig+0xe4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d113      	bne.n	80039ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	621a      	str	r2, [r3, #32]
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40013400 	.word	0x40013400

08003a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a21      	ldr	r2, [pc, #132]	; (8003af8 <TIM_OC3_SetConfig+0xe0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC3_SetConfig+0x66>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a20      	ldr	r2, [pc, #128]	; (8003afc <TIM_OC3_SetConfig+0xe4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d10d      	bne.n	8003a9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a16      	ldr	r2, [pc, #88]	; (8003af8 <TIM_OC3_SetConfig+0xe0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_OC3_SetConfig+0x92>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a15      	ldr	r2, [pc, #84]	; (8003afc <TIM_OC3_SetConfig+0xe4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d113      	bne.n	8003ad2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	bf00      	nop
 8003aee:	371c      	adds	r7, #28
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40013400 	.word	0x40013400

08003b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	021b      	lsls	r3, r3, #8
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a11      	ldr	r2, [pc, #68]	; (8003ba0 <TIM_OC4_SetConfig+0xa0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <TIM_OC4_SetConfig+0x68>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <TIM_OC4_SetConfig+0xa4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d109      	bne.n	8003b7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	621a      	str	r2, [r3, #32]
}
 8003b96:	bf00      	nop
 8003b98:	371c      	adds	r7, #28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bc80      	pop	{r7}
 8003b9e:	4770      	bx	lr
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400

08003ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 031f 	and.w	r3, r3, #31
 8003bba:	2201      	movs	r2, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	431a      	orrs	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	621a      	str	r2, [r3, #32]
}
 8003be6:	bf00      	nop
 8003be8:	371c      	adds	r7, #28
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e050      	b.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1b      	ldr	r2, [pc, #108]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a19      	ldr	r2, [pc, #100]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d00e      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a15      	ldr	r2, [pc, #84]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr
 8003cb4:	40012c00 	.word	0x40012c00
 8003cb8:	40013400 	.word	0x40013400
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00

08003cc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e03d      	b.n	8003d60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr

08003d6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e03f      	b.n	8003dfc <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d106      	bne.n	8003d96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7fd fba3 	bl	80014dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2224      	movs	r2, #36	; 0x24
 8003d9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f904 	bl	8003fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691a      	ldr	r2, [r3, #16]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68da      	ldr	r2, [r3, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d17c      	bne.n	8003f1e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_UART_Transmit+0x2c>
 8003e2a:	88fb      	ldrh	r3, [r7, #6]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e075      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Transmit+0x3e>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e06e      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2221      	movs	r2, #33	; 0x21
 8003e54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e58:	f7fd fc0a 	bl	8001670 <HAL_GetTick>
 8003e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	88fa      	ldrh	r2, [r7, #6]
 8003e62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	88fa      	ldrh	r2, [r7, #6]
 8003e68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d108      	bne.n	8003e86 <HAL_UART_Transmit+0x82>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e003      	b.n	8003e8e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e96:	e02a      	b.n	8003eee <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f840 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e036      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	3302      	adds	r3, #2
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e007      	b.n	8003ee0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3301      	adds	r3, #1
 8003ede:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1cf      	bne.n	8003e98 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2200      	movs	r2, #0
 8003f00:	2140      	movs	r1, #64	; 0x40
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f810 	bl	8003f28 <UART_WaitOnFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e006      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e000      	b.n	8003f20 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f1e:	2302      	movs	r3, #2
  }
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3720      	adds	r7, #32
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f38:	e02c      	b.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d028      	beq.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f48:	f7fd fb92 	bl	8001670 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d21d      	bcs.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e00f      	b.n	8003fb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d0c3      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ff6:	f023 030c 	bic.w	r3, r3, #12
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	430b      	orrs	r3, r1
 8004002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699a      	ldr	r2, [r3, #24]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <UART_SetConfig+0x114>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d103      	bne.n	800402c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004024:	f7ff f8ea 	bl	80031fc <HAL_RCC_GetPCLK2Freq>
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	e002      	b.n	8004032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800402c:	f7ff f8d2 	bl	80031d4 <HAL_RCC_GetPCLK1Freq>
 8004030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009a      	lsls	r2, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	4a22      	ldr	r2, [pc, #136]	; (80040d4 <UART_SetConfig+0x118>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	0119      	lsls	r1, r3, #4
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4613      	mov	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	009a      	lsls	r2, r3, #2
 800405c:	441a      	add	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	fbb2 f2f3 	udiv	r2, r2, r3
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <UART_SetConfig+0x118>)
 800406a:	fba3 0302 	umull	r0, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2064      	movs	r0, #100	; 0x64
 8004072:	fb00 f303 	mul.w	r3, r0, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	; 0x32
 800407c:	4a15      	ldr	r2, [pc, #84]	; (80040d4 <UART_SetConfig+0x118>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004088:	4419      	add	r1, r3
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009a      	lsls	r2, r3, #2
 8004094:	441a      	add	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <UART_SetConfig+0x118>)
 80040a2:	fba3 0302 	umull	r0, r3, r3, r2
 80040a6:	095b      	lsrs	r3, r3, #5
 80040a8:	2064      	movs	r0, #100	; 0x64
 80040aa:	fb00 f303 	mul.w	r3, r0, r3
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	3332      	adds	r3, #50	; 0x32
 80040b4:	4a07      	ldr	r2, [pc, #28]	; (80040d4 <UART_SetConfig+0x118>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	f003 020f 	and.w	r2, r3, #15
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	440a      	add	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c8:	bf00      	nop
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40013800 	.word	0x40013800
 80040d4:	51eb851f 	.word	0x51eb851f

080040d8 <__errno>:
 80040d8:	4b01      	ldr	r3, [pc, #4]	; (80040e0 <__errno+0x8>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000064 	.word	0x20000064

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	2600      	movs	r6, #0
 80040e8:	4d0c      	ldr	r5, [pc, #48]	; (800411c <__libc_init_array+0x38>)
 80040ea:	4c0d      	ldr	r4, [pc, #52]	; (8004120 <__libc_init_array+0x3c>)
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	f000 ff82 	bl	8004ffc <_init>
 80040f8:	2600      	movs	r6, #0
 80040fa:	4d0a      	ldr	r5, [pc, #40]	; (8004124 <__libc_init_array+0x40>)
 80040fc:	4c0a      	ldr	r4, [pc, #40]	; (8004128 <__libc_init_array+0x44>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	f855 3b04 	ldr.w	r3, [r5], #4
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	f855 3b04 	ldr.w	r3, [r5], #4
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	080050e8 	.word	0x080050e8
 8004120:	080050e8 	.word	0x080050e8
 8004124:	080050e8 	.word	0x080050e8
 8004128:	080050ec 	.word	0x080050ec

0800412c <memset>:
 800412c:	4603      	mov	r3, r0
 800412e:	4402      	add	r2, r0
 8004130:	4293      	cmp	r3, r2
 8004132:	d100      	bne.n	8004136 <memset+0xa>
 8004134:	4770      	bx	lr
 8004136:	f803 1b01 	strb.w	r1, [r3], #1
 800413a:	e7f9      	b.n	8004130 <memset+0x4>

0800413c <iprintf>:
 800413c:	b40f      	push	{r0, r1, r2, r3}
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <iprintf+0x2c>)
 8004140:	b513      	push	{r0, r1, r4, lr}
 8004142:	681c      	ldr	r4, [r3, #0]
 8004144:	b124      	cbz	r4, 8004150 <iprintf+0x14>
 8004146:	69a3      	ldr	r3, [r4, #24]
 8004148:	b913      	cbnz	r3, 8004150 <iprintf+0x14>
 800414a:	4620      	mov	r0, r4
 800414c:	f000 f866 	bl	800421c <__sinit>
 8004150:	ab05      	add	r3, sp, #20
 8004152:	4620      	mov	r0, r4
 8004154:	9a04      	ldr	r2, [sp, #16]
 8004156:	68a1      	ldr	r1, [r4, #8]
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	f000 f981 	bl	8004460 <_vfiprintf_r>
 800415e:	b002      	add	sp, #8
 8004160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004164:	b004      	add	sp, #16
 8004166:	4770      	bx	lr
 8004168:	20000064 	.word	0x20000064

0800416c <std>:
 800416c:	2300      	movs	r3, #0
 800416e:	b510      	push	{r4, lr}
 8004170:	4604      	mov	r4, r0
 8004172:	e9c0 3300 	strd	r3, r3, [r0]
 8004176:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800417a:	6083      	str	r3, [r0, #8]
 800417c:	8181      	strh	r1, [r0, #12]
 800417e:	6643      	str	r3, [r0, #100]	; 0x64
 8004180:	81c2      	strh	r2, [r0, #14]
 8004182:	6183      	str	r3, [r0, #24]
 8004184:	4619      	mov	r1, r3
 8004186:	2208      	movs	r2, #8
 8004188:	305c      	adds	r0, #92	; 0x5c
 800418a:	f7ff ffcf 	bl	800412c <memset>
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <std+0x38>)
 8004190:	6224      	str	r4, [r4, #32]
 8004192:	6263      	str	r3, [r4, #36]	; 0x24
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <std+0x3c>)
 8004196:	62a3      	str	r3, [r4, #40]	; 0x28
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <std+0x40>)
 800419a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800419c:	4b04      	ldr	r3, [pc, #16]	; (80041b0 <std+0x44>)
 800419e:	6323      	str	r3, [r4, #48]	; 0x30
 80041a0:	bd10      	pop	{r4, pc}
 80041a2:	bf00      	nop
 80041a4:	08004a0d 	.word	0x08004a0d
 80041a8:	08004a2f 	.word	0x08004a2f
 80041ac:	08004a67 	.word	0x08004a67
 80041b0:	08004a8b 	.word	0x08004a8b

080041b4 <_cleanup_r>:
 80041b4:	4901      	ldr	r1, [pc, #4]	; (80041bc <_cleanup_r+0x8>)
 80041b6:	f000 b8af 	b.w	8004318 <_fwalk_reent>
 80041ba:	bf00      	nop
 80041bc:	08004d65 	.word	0x08004d65

080041c0 <__sfmoreglue>:
 80041c0:	b570      	push	{r4, r5, r6, lr}
 80041c2:	2568      	movs	r5, #104	; 0x68
 80041c4:	1e4a      	subs	r2, r1, #1
 80041c6:	4355      	muls	r5, r2
 80041c8:	460e      	mov	r6, r1
 80041ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041ce:	f000 f8c5 	bl	800435c <_malloc_r>
 80041d2:	4604      	mov	r4, r0
 80041d4:	b140      	cbz	r0, 80041e8 <__sfmoreglue+0x28>
 80041d6:	2100      	movs	r1, #0
 80041d8:	e9c0 1600 	strd	r1, r6, [r0]
 80041dc:	300c      	adds	r0, #12
 80041de:	60a0      	str	r0, [r4, #8]
 80041e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041e4:	f7ff ffa2 	bl	800412c <memset>
 80041e8:	4620      	mov	r0, r4
 80041ea:	bd70      	pop	{r4, r5, r6, pc}

080041ec <__sfp_lock_acquire>:
 80041ec:	4801      	ldr	r0, [pc, #4]	; (80041f4 <__sfp_lock_acquire+0x8>)
 80041ee:	f000 b8b3 	b.w	8004358 <__retarget_lock_acquire_recursive>
 80041f2:	bf00      	nop
 80041f4:	20000248 	.word	0x20000248

080041f8 <__sfp_lock_release>:
 80041f8:	4801      	ldr	r0, [pc, #4]	; (8004200 <__sfp_lock_release+0x8>)
 80041fa:	f000 b8ae 	b.w	800435a <__retarget_lock_release_recursive>
 80041fe:	bf00      	nop
 8004200:	20000248 	.word	0x20000248

08004204 <__sinit_lock_acquire>:
 8004204:	4801      	ldr	r0, [pc, #4]	; (800420c <__sinit_lock_acquire+0x8>)
 8004206:	f000 b8a7 	b.w	8004358 <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	20000243 	.word	0x20000243

08004210 <__sinit_lock_release>:
 8004210:	4801      	ldr	r0, [pc, #4]	; (8004218 <__sinit_lock_release+0x8>)
 8004212:	f000 b8a2 	b.w	800435a <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	20000243 	.word	0x20000243

0800421c <__sinit>:
 800421c:	b510      	push	{r4, lr}
 800421e:	4604      	mov	r4, r0
 8004220:	f7ff fff0 	bl	8004204 <__sinit_lock_acquire>
 8004224:	69a3      	ldr	r3, [r4, #24]
 8004226:	b11b      	cbz	r3, 8004230 <__sinit+0x14>
 8004228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800422c:	f7ff bff0 	b.w	8004210 <__sinit_lock_release>
 8004230:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004234:	6523      	str	r3, [r4, #80]	; 0x50
 8004236:	4b13      	ldr	r3, [pc, #76]	; (8004284 <__sinit+0x68>)
 8004238:	4a13      	ldr	r2, [pc, #76]	; (8004288 <__sinit+0x6c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	62a2      	str	r2, [r4, #40]	; 0x28
 800423e:	42a3      	cmp	r3, r4
 8004240:	bf08      	it	eq
 8004242:	2301      	moveq	r3, #1
 8004244:	4620      	mov	r0, r4
 8004246:	bf08      	it	eq
 8004248:	61a3      	streq	r3, [r4, #24]
 800424a:	f000 f81f 	bl	800428c <__sfp>
 800424e:	6060      	str	r0, [r4, #4]
 8004250:	4620      	mov	r0, r4
 8004252:	f000 f81b 	bl	800428c <__sfp>
 8004256:	60a0      	str	r0, [r4, #8]
 8004258:	4620      	mov	r0, r4
 800425a:	f000 f817 	bl	800428c <__sfp>
 800425e:	2200      	movs	r2, #0
 8004260:	2104      	movs	r1, #4
 8004262:	60e0      	str	r0, [r4, #12]
 8004264:	6860      	ldr	r0, [r4, #4]
 8004266:	f7ff ff81 	bl	800416c <std>
 800426a:	2201      	movs	r2, #1
 800426c:	2109      	movs	r1, #9
 800426e:	68a0      	ldr	r0, [r4, #8]
 8004270:	f7ff ff7c 	bl	800416c <std>
 8004274:	2202      	movs	r2, #2
 8004276:	2112      	movs	r1, #18
 8004278:	68e0      	ldr	r0, [r4, #12]
 800427a:	f7ff ff77 	bl	800416c <std>
 800427e:	2301      	movs	r3, #1
 8004280:	61a3      	str	r3, [r4, #24]
 8004282:	e7d1      	b.n	8004228 <__sinit+0xc>
 8004284:	08005050 	.word	0x08005050
 8004288:	080041b5 	.word	0x080041b5

0800428c <__sfp>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	4607      	mov	r7, r0
 8004290:	f7ff ffac 	bl	80041ec <__sfp_lock_acquire>
 8004294:	4b1e      	ldr	r3, [pc, #120]	; (8004310 <__sfp+0x84>)
 8004296:	681e      	ldr	r6, [r3, #0]
 8004298:	69b3      	ldr	r3, [r6, #24]
 800429a:	b913      	cbnz	r3, 80042a2 <__sfp+0x16>
 800429c:	4630      	mov	r0, r6
 800429e:	f7ff ffbd 	bl	800421c <__sinit>
 80042a2:	3648      	adds	r6, #72	; 0x48
 80042a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	d503      	bpl.n	80042b4 <__sfp+0x28>
 80042ac:	6833      	ldr	r3, [r6, #0]
 80042ae:	b30b      	cbz	r3, 80042f4 <__sfp+0x68>
 80042b0:	6836      	ldr	r6, [r6, #0]
 80042b2:	e7f7      	b.n	80042a4 <__sfp+0x18>
 80042b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042b8:	b9d5      	cbnz	r5, 80042f0 <__sfp+0x64>
 80042ba:	4b16      	ldr	r3, [pc, #88]	; (8004314 <__sfp+0x88>)
 80042bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042c0:	60e3      	str	r3, [r4, #12]
 80042c2:	6665      	str	r5, [r4, #100]	; 0x64
 80042c4:	f000 f847 	bl	8004356 <__retarget_lock_init_recursive>
 80042c8:	f7ff ff96 	bl	80041f8 <__sfp_lock_release>
 80042cc:	2208      	movs	r2, #8
 80042ce:	4629      	mov	r1, r5
 80042d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042d8:	6025      	str	r5, [r4, #0]
 80042da:	61a5      	str	r5, [r4, #24]
 80042dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042e0:	f7ff ff24 	bl	800412c <memset>
 80042e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042ec:	4620      	mov	r0, r4
 80042ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f0:	3468      	adds	r4, #104	; 0x68
 80042f2:	e7d9      	b.n	80042a8 <__sfp+0x1c>
 80042f4:	2104      	movs	r1, #4
 80042f6:	4638      	mov	r0, r7
 80042f8:	f7ff ff62 	bl	80041c0 <__sfmoreglue>
 80042fc:	4604      	mov	r4, r0
 80042fe:	6030      	str	r0, [r6, #0]
 8004300:	2800      	cmp	r0, #0
 8004302:	d1d5      	bne.n	80042b0 <__sfp+0x24>
 8004304:	f7ff ff78 	bl	80041f8 <__sfp_lock_release>
 8004308:	230c      	movs	r3, #12
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	e7ee      	b.n	80042ec <__sfp+0x60>
 800430e:	bf00      	nop
 8004310:	08005050 	.word	0x08005050
 8004314:	ffff0001 	.word	0xffff0001

08004318 <_fwalk_reent>:
 8004318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800431c:	4606      	mov	r6, r0
 800431e:	4688      	mov	r8, r1
 8004320:	2700      	movs	r7, #0
 8004322:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004326:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800432a:	f1b9 0901 	subs.w	r9, r9, #1
 800432e:	d505      	bpl.n	800433c <_fwalk_reent+0x24>
 8004330:	6824      	ldr	r4, [r4, #0]
 8004332:	2c00      	cmp	r4, #0
 8004334:	d1f7      	bne.n	8004326 <_fwalk_reent+0xe>
 8004336:	4638      	mov	r0, r7
 8004338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800433c:	89ab      	ldrh	r3, [r5, #12]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d907      	bls.n	8004352 <_fwalk_reent+0x3a>
 8004342:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004346:	3301      	adds	r3, #1
 8004348:	d003      	beq.n	8004352 <_fwalk_reent+0x3a>
 800434a:	4629      	mov	r1, r5
 800434c:	4630      	mov	r0, r6
 800434e:	47c0      	blx	r8
 8004350:	4307      	orrs	r7, r0
 8004352:	3568      	adds	r5, #104	; 0x68
 8004354:	e7e9      	b.n	800432a <_fwalk_reent+0x12>

08004356 <__retarget_lock_init_recursive>:
 8004356:	4770      	bx	lr

08004358 <__retarget_lock_acquire_recursive>:
 8004358:	4770      	bx	lr

0800435a <__retarget_lock_release_recursive>:
 800435a:	4770      	bx	lr

0800435c <_malloc_r>:
 800435c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435e:	1ccd      	adds	r5, r1, #3
 8004360:	f025 0503 	bic.w	r5, r5, #3
 8004364:	3508      	adds	r5, #8
 8004366:	2d0c      	cmp	r5, #12
 8004368:	bf38      	it	cc
 800436a:	250c      	movcc	r5, #12
 800436c:	2d00      	cmp	r5, #0
 800436e:	4606      	mov	r6, r0
 8004370:	db01      	blt.n	8004376 <_malloc_r+0x1a>
 8004372:	42a9      	cmp	r1, r5
 8004374:	d903      	bls.n	800437e <_malloc_r+0x22>
 8004376:	230c      	movs	r3, #12
 8004378:	6033      	str	r3, [r6, #0]
 800437a:	2000      	movs	r0, #0
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800437e:	f000 fdb1 	bl	8004ee4 <__malloc_lock>
 8004382:	4921      	ldr	r1, [pc, #132]	; (8004408 <_malloc_r+0xac>)
 8004384:	680a      	ldr	r2, [r1, #0]
 8004386:	4614      	mov	r4, r2
 8004388:	b99c      	cbnz	r4, 80043b2 <_malloc_r+0x56>
 800438a:	4f20      	ldr	r7, [pc, #128]	; (800440c <_malloc_r+0xb0>)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	b923      	cbnz	r3, 800439a <_malloc_r+0x3e>
 8004390:	4621      	mov	r1, r4
 8004392:	4630      	mov	r0, r6
 8004394:	f000 fb2a 	bl	80049ec <_sbrk_r>
 8004398:	6038      	str	r0, [r7, #0]
 800439a:	4629      	mov	r1, r5
 800439c:	4630      	mov	r0, r6
 800439e:	f000 fb25 	bl	80049ec <_sbrk_r>
 80043a2:	1c43      	adds	r3, r0, #1
 80043a4:	d123      	bne.n	80043ee <_malloc_r+0x92>
 80043a6:	230c      	movs	r3, #12
 80043a8:	4630      	mov	r0, r6
 80043aa:	6033      	str	r3, [r6, #0]
 80043ac:	f000 fda0 	bl	8004ef0 <__malloc_unlock>
 80043b0:	e7e3      	b.n	800437a <_malloc_r+0x1e>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	1b5b      	subs	r3, r3, r5
 80043b6:	d417      	bmi.n	80043e8 <_malloc_r+0x8c>
 80043b8:	2b0b      	cmp	r3, #11
 80043ba:	d903      	bls.n	80043c4 <_malloc_r+0x68>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	441c      	add	r4, r3
 80043c0:	6025      	str	r5, [r4, #0]
 80043c2:	e004      	b.n	80043ce <_malloc_r+0x72>
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	42a2      	cmp	r2, r4
 80043c8:	bf0c      	ite	eq
 80043ca:	600b      	streq	r3, [r1, #0]
 80043cc:	6053      	strne	r3, [r2, #4]
 80043ce:	4630      	mov	r0, r6
 80043d0:	f000 fd8e 	bl	8004ef0 <__malloc_unlock>
 80043d4:	f104 000b 	add.w	r0, r4, #11
 80043d8:	1d23      	adds	r3, r4, #4
 80043da:	f020 0007 	bic.w	r0, r0, #7
 80043de:	1ac2      	subs	r2, r0, r3
 80043e0:	d0cc      	beq.n	800437c <_malloc_r+0x20>
 80043e2:	1a1b      	subs	r3, r3, r0
 80043e4:	50a3      	str	r3, [r4, r2]
 80043e6:	e7c9      	b.n	800437c <_malloc_r+0x20>
 80043e8:	4622      	mov	r2, r4
 80043ea:	6864      	ldr	r4, [r4, #4]
 80043ec:	e7cc      	b.n	8004388 <_malloc_r+0x2c>
 80043ee:	1cc4      	adds	r4, r0, #3
 80043f0:	f024 0403 	bic.w	r4, r4, #3
 80043f4:	42a0      	cmp	r0, r4
 80043f6:	d0e3      	beq.n	80043c0 <_malloc_r+0x64>
 80043f8:	1a21      	subs	r1, r4, r0
 80043fa:	4630      	mov	r0, r6
 80043fc:	f000 faf6 	bl	80049ec <_sbrk_r>
 8004400:	3001      	adds	r0, #1
 8004402:	d1dd      	bne.n	80043c0 <_malloc_r+0x64>
 8004404:	e7cf      	b.n	80043a6 <_malloc_r+0x4a>
 8004406:	bf00      	nop
 8004408:	200000ec 	.word	0x200000ec
 800440c:	200000f0 	.word	0x200000f0

08004410 <__sfputc_r>:
 8004410:	6893      	ldr	r3, [r2, #8]
 8004412:	b410      	push	{r4}
 8004414:	3b01      	subs	r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	6093      	str	r3, [r2, #8]
 800441a:	da07      	bge.n	800442c <__sfputc_r+0x1c>
 800441c:	6994      	ldr	r4, [r2, #24]
 800441e:	42a3      	cmp	r3, r4
 8004420:	db01      	blt.n	8004426 <__sfputc_r+0x16>
 8004422:	290a      	cmp	r1, #10
 8004424:	d102      	bne.n	800442c <__sfputc_r+0x1c>
 8004426:	bc10      	pop	{r4}
 8004428:	f000 bb34 	b.w	8004a94 <__swbuf_r>
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	1c58      	adds	r0, r3, #1
 8004430:	6010      	str	r0, [r2, #0]
 8004432:	7019      	strb	r1, [r3, #0]
 8004434:	4608      	mov	r0, r1
 8004436:	bc10      	pop	{r4}
 8004438:	4770      	bx	lr

0800443a <__sfputs_r>:
 800443a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443c:	4606      	mov	r6, r0
 800443e:	460f      	mov	r7, r1
 8004440:	4614      	mov	r4, r2
 8004442:	18d5      	adds	r5, r2, r3
 8004444:	42ac      	cmp	r4, r5
 8004446:	d101      	bne.n	800444c <__sfputs_r+0x12>
 8004448:	2000      	movs	r0, #0
 800444a:	e007      	b.n	800445c <__sfputs_r+0x22>
 800444c:	463a      	mov	r2, r7
 800444e:	4630      	mov	r0, r6
 8004450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004454:	f7ff ffdc 	bl	8004410 <__sfputc_r>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d1f3      	bne.n	8004444 <__sfputs_r+0xa>
 800445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004460 <_vfiprintf_r>:
 8004460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004464:	460d      	mov	r5, r1
 8004466:	4614      	mov	r4, r2
 8004468:	4698      	mov	r8, r3
 800446a:	4606      	mov	r6, r0
 800446c:	b09d      	sub	sp, #116	; 0x74
 800446e:	b118      	cbz	r0, 8004478 <_vfiprintf_r+0x18>
 8004470:	6983      	ldr	r3, [r0, #24]
 8004472:	b90b      	cbnz	r3, 8004478 <_vfiprintf_r+0x18>
 8004474:	f7ff fed2 	bl	800421c <__sinit>
 8004478:	4b89      	ldr	r3, [pc, #548]	; (80046a0 <_vfiprintf_r+0x240>)
 800447a:	429d      	cmp	r5, r3
 800447c:	d11b      	bne.n	80044b6 <_vfiprintf_r+0x56>
 800447e:	6875      	ldr	r5, [r6, #4]
 8004480:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004482:	07d9      	lsls	r1, r3, #31
 8004484:	d405      	bmi.n	8004492 <_vfiprintf_r+0x32>
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	059a      	lsls	r2, r3, #22
 800448a:	d402      	bmi.n	8004492 <_vfiprintf_r+0x32>
 800448c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800448e:	f7ff ff63 	bl	8004358 <__retarget_lock_acquire_recursive>
 8004492:	89ab      	ldrh	r3, [r5, #12]
 8004494:	071b      	lsls	r3, r3, #28
 8004496:	d501      	bpl.n	800449c <_vfiprintf_r+0x3c>
 8004498:	692b      	ldr	r3, [r5, #16]
 800449a:	b9eb      	cbnz	r3, 80044d8 <_vfiprintf_r+0x78>
 800449c:	4629      	mov	r1, r5
 800449e:	4630      	mov	r0, r6
 80044a0:	f000 fb5c 	bl	8004b5c <__swsetup_r>
 80044a4:	b1c0      	cbz	r0, 80044d8 <_vfiprintf_r+0x78>
 80044a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044a8:	07dc      	lsls	r4, r3, #31
 80044aa:	d50e      	bpl.n	80044ca <_vfiprintf_r+0x6a>
 80044ac:	f04f 30ff 	mov.w	r0, #4294967295
 80044b0:	b01d      	add	sp, #116	; 0x74
 80044b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b6:	4b7b      	ldr	r3, [pc, #492]	; (80046a4 <_vfiprintf_r+0x244>)
 80044b8:	429d      	cmp	r5, r3
 80044ba:	d101      	bne.n	80044c0 <_vfiprintf_r+0x60>
 80044bc:	68b5      	ldr	r5, [r6, #8]
 80044be:	e7df      	b.n	8004480 <_vfiprintf_r+0x20>
 80044c0:	4b79      	ldr	r3, [pc, #484]	; (80046a8 <_vfiprintf_r+0x248>)
 80044c2:	429d      	cmp	r5, r3
 80044c4:	bf08      	it	eq
 80044c6:	68f5      	ldreq	r5, [r6, #12]
 80044c8:	e7da      	b.n	8004480 <_vfiprintf_r+0x20>
 80044ca:	89ab      	ldrh	r3, [r5, #12]
 80044cc:	0598      	lsls	r0, r3, #22
 80044ce:	d4ed      	bmi.n	80044ac <_vfiprintf_r+0x4c>
 80044d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044d2:	f7ff ff42 	bl	800435a <__retarget_lock_release_recursive>
 80044d6:	e7e9      	b.n	80044ac <_vfiprintf_r+0x4c>
 80044d8:	2300      	movs	r3, #0
 80044da:	9309      	str	r3, [sp, #36]	; 0x24
 80044dc:	2320      	movs	r3, #32
 80044de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044e2:	2330      	movs	r3, #48	; 0x30
 80044e4:	f04f 0901 	mov.w	r9, #1
 80044e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80044ec:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046ac <_vfiprintf_r+0x24c>
 80044f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044f4:	4623      	mov	r3, r4
 80044f6:	469a      	mov	sl, r3
 80044f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044fc:	b10a      	cbz	r2, 8004502 <_vfiprintf_r+0xa2>
 80044fe:	2a25      	cmp	r2, #37	; 0x25
 8004500:	d1f9      	bne.n	80044f6 <_vfiprintf_r+0x96>
 8004502:	ebba 0b04 	subs.w	fp, sl, r4
 8004506:	d00b      	beq.n	8004520 <_vfiprintf_r+0xc0>
 8004508:	465b      	mov	r3, fp
 800450a:	4622      	mov	r2, r4
 800450c:	4629      	mov	r1, r5
 800450e:	4630      	mov	r0, r6
 8004510:	f7ff ff93 	bl	800443a <__sfputs_r>
 8004514:	3001      	adds	r0, #1
 8004516:	f000 80aa 	beq.w	800466e <_vfiprintf_r+0x20e>
 800451a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800451c:	445a      	add	r2, fp
 800451e:	9209      	str	r2, [sp, #36]	; 0x24
 8004520:	f89a 3000 	ldrb.w	r3, [sl]
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 80a2 	beq.w	800466e <_vfiprintf_r+0x20e>
 800452a:	2300      	movs	r3, #0
 800452c:	f04f 32ff 	mov.w	r2, #4294967295
 8004530:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004534:	f10a 0a01 	add.w	sl, sl, #1
 8004538:	9304      	str	r3, [sp, #16]
 800453a:	9307      	str	r3, [sp, #28]
 800453c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004540:	931a      	str	r3, [sp, #104]	; 0x68
 8004542:	4654      	mov	r4, sl
 8004544:	2205      	movs	r2, #5
 8004546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800454a:	4858      	ldr	r0, [pc, #352]	; (80046ac <_vfiprintf_r+0x24c>)
 800454c:	f000 fcbc 	bl	8004ec8 <memchr>
 8004550:	9a04      	ldr	r2, [sp, #16]
 8004552:	b9d8      	cbnz	r0, 800458c <_vfiprintf_r+0x12c>
 8004554:	06d1      	lsls	r1, r2, #27
 8004556:	bf44      	itt	mi
 8004558:	2320      	movmi	r3, #32
 800455a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800455e:	0713      	lsls	r3, r2, #28
 8004560:	bf44      	itt	mi
 8004562:	232b      	movmi	r3, #43	; 0x2b
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004568:	f89a 3000 	ldrb.w	r3, [sl]
 800456c:	2b2a      	cmp	r3, #42	; 0x2a
 800456e:	d015      	beq.n	800459c <_vfiprintf_r+0x13c>
 8004570:	4654      	mov	r4, sl
 8004572:	2000      	movs	r0, #0
 8004574:	f04f 0c0a 	mov.w	ip, #10
 8004578:	9a07      	ldr	r2, [sp, #28]
 800457a:	4621      	mov	r1, r4
 800457c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004580:	3b30      	subs	r3, #48	; 0x30
 8004582:	2b09      	cmp	r3, #9
 8004584:	d94e      	bls.n	8004624 <_vfiprintf_r+0x1c4>
 8004586:	b1b0      	cbz	r0, 80045b6 <_vfiprintf_r+0x156>
 8004588:	9207      	str	r2, [sp, #28]
 800458a:	e014      	b.n	80045b6 <_vfiprintf_r+0x156>
 800458c:	eba0 0308 	sub.w	r3, r0, r8
 8004590:	fa09 f303 	lsl.w	r3, r9, r3
 8004594:	4313      	orrs	r3, r2
 8004596:	46a2      	mov	sl, r4
 8004598:	9304      	str	r3, [sp, #16]
 800459a:	e7d2      	b.n	8004542 <_vfiprintf_r+0xe2>
 800459c:	9b03      	ldr	r3, [sp, #12]
 800459e:	1d19      	adds	r1, r3, #4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	9103      	str	r1, [sp, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bfbb      	ittet	lt
 80045a8:	425b      	neglt	r3, r3
 80045aa:	f042 0202 	orrlt.w	r2, r2, #2
 80045ae:	9307      	strge	r3, [sp, #28]
 80045b0:	9307      	strlt	r3, [sp, #28]
 80045b2:	bfb8      	it	lt
 80045b4:	9204      	strlt	r2, [sp, #16]
 80045b6:	7823      	ldrb	r3, [r4, #0]
 80045b8:	2b2e      	cmp	r3, #46	; 0x2e
 80045ba:	d10c      	bne.n	80045d6 <_vfiprintf_r+0x176>
 80045bc:	7863      	ldrb	r3, [r4, #1]
 80045be:	2b2a      	cmp	r3, #42	; 0x2a
 80045c0:	d135      	bne.n	800462e <_vfiprintf_r+0x1ce>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	3402      	adds	r4, #2
 80045c6:	1d1a      	adds	r2, r3, #4
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	9203      	str	r2, [sp, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bfb8      	it	lt
 80045d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046bc <_vfiprintf_r+0x25c>
 80045da:	2203      	movs	r2, #3
 80045dc:	4650      	mov	r0, sl
 80045de:	7821      	ldrb	r1, [r4, #0]
 80045e0:	f000 fc72 	bl	8004ec8 <memchr>
 80045e4:	b140      	cbz	r0, 80045f8 <_vfiprintf_r+0x198>
 80045e6:	2340      	movs	r3, #64	; 0x40
 80045e8:	eba0 000a 	sub.w	r0, r0, sl
 80045ec:	fa03 f000 	lsl.w	r0, r3, r0
 80045f0:	9b04      	ldr	r3, [sp, #16]
 80045f2:	3401      	adds	r4, #1
 80045f4:	4303      	orrs	r3, r0
 80045f6:	9304      	str	r3, [sp, #16]
 80045f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045fc:	2206      	movs	r2, #6
 80045fe:	482c      	ldr	r0, [pc, #176]	; (80046b0 <_vfiprintf_r+0x250>)
 8004600:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004604:	f000 fc60 	bl	8004ec8 <memchr>
 8004608:	2800      	cmp	r0, #0
 800460a:	d03f      	beq.n	800468c <_vfiprintf_r+0x22c>
 800460c:	4b29      	ldr	r3, [pc, #164]	; (80046b4 <_vfiprintf_r+0x254>)
 800460e:	bb1b      	cbnz	r3, 8004658 <_vfiprintf_r+0x1f8>
 8004610:	9b03      	ldr	r3, [sp, #12]
 8004612:	3307      	adds	r3, #7
 8004614:	f023 0307 	bic.w	r3, r3, #7
 8004618:	3308      	adds	r3, #8
 800461a:	9303      	str	r3, [sp, #12]
 800461c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800461e:	443b      	add	r3, r7
 8004620:	9309      	str	r3, [sp, #36]	; 0x24
 8004622:	e767      	b.n	80044f4 <_vfiprintf_r+0x94>
 8004624:	460c      	mov	r4, r1
 8004626:	2001      	movs	r0, #1
 8004628:	fb0c 3202 	mla	r2, ip, r2, r3
 800462c:	e7a5      	b.n	800457a <_vfiprintf_r+0x11a>
 800462e:	2300      	movs	r3, #0
 8004630:	f04f 0c0a 	mov.w	ip, #10
 8004634:	4619      	mov	r1, r3
 8004636:	3401      	adds	r4, #1
 8004638:	9305      	str	r3, [sp, #20]
 800463a:	4620      	mov	r0, r4
 800463c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004640:	3a30      	subs	r2, #48	; 0x30
 8004642:	2a09      	cmp	r2, #9
 8004644:	d903      	bls.n	800464e <_vfiprintf_r+0x1ee>
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0c5      	beq.n	80045d6 <_vfiprintf_r+0x176>
 800464a:	9105      	str	r1, [sp, #20]
 800464c:	e7c3      	b.n	80045d6 <_vfiprintf_r+0x176>
 800464e:	4604      	mov	r4, r0
 8004650:	2301      	movs	r3, #1
 8004652:	fb0c 2101 	mla	r1, ip, r1, r2
 8004656:	e7f0      	b.n	800463a <_vfiprintf_r+0x1da>
 8004658:	ab03      	add	r3, sp, #12
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	462a      	mov	r2, r5
 800465e:	4630      	mov	r0, r6
 8004660:	4b15      	ldr	r3, [pc, #84]	; (80046b8 <_vfiprintf_r+0x258>)
 8004662:	a904      	add	r1, sp, #16
 8004664:	f3af 8000 	nop.w
 8004668:	4607      	mov	r7, r0
 800466a:	1c78      	adds	r0, r7, #1
 800466c:	d1d6      	bne.n	800461c <_vfiprintf_r+0x1bc>
 800466e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004670:	07d9      	lsls	r1, r3, #31
 8004672:	d405      	bmi.n	8004680 <_vfiprintf_r+0x220>
 8004674:	89ab      	ldrh	r3, [r5, #12]
 8004676:	059a      	lsls	r2, r3, #22
 8004678:	d402      	bmi.n	8004680 <_vfiprintf_r+0x220>
 800467a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800467c:	f7ff fe6d 	bl	800435a <__retarget_lock_release_recursive>
 8004680:	89ab      	ldrh	r3, [r5, #12]
 8004682:	065b      	lsls	r3, r3, #25
 8004684:	f53f af12 	bmi.w	80044ac <_vfiprintf_r+0x4c>
 8004688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800468a:	e711      	b.n	80044b0 <_vfiprintf_r+0x50>
 800468c:	ab03      	add	r3, sp, #12
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	462a      	mov	r2, r5
 8004692:	4630      	mov	r0, r6
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <_vfiprintf_r+0x258>)
 8004696:	a904      	add	r1, sp, #16
 8004698:	f000 f882 	bl	80047a0 <_printf_i>
 800469c:	e7e4      	b.n	8004668 <_vfiprintf_r+0x208>
 800469e:	bf00      	nop
 80046a0:	08005074 	.word	0x08005074
 80046a4:	08005094 	.word	0x08005094
 80046a8:	08005054 	.word	0x08005054
 80046ac:	080050b4 	.word	0x080050b4
 80046b0:	080050be 	.word	0x080050be
 80046b4:	00000000 	.word	0x00000000
 80046b8:	0800443b 	.word	0x0800443b
 80046bc:	080050ba 	.word	0x080050ba

080046c0 <_printf_common>:
 80046c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046c4:	4616      	mov	r6, r2
 80046c6:	4699      	mov	r9, r3
 80046c8:	688a      	ldr	r2, [r1, #8]
 80046ca:	690b      	ldr	r3, [r1, #16]
 80046cc:	4607      	mov	r7, r0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	bfb8      	it	lt
 80046d2:	4613      	movlt	r3, r2
 80046d4:	6033      	str	r3, [r6, #0]
 80046d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046da:	460c      	mov	r4, r1
 80046dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046e0:	b10a      	cbz	r2, 80046e6 <_printf_common+0x26>
 80046e2:	3301      	adds	r3, #1
 80046e4:	6033      	str	r3, [r6, #0]
 80046e6:	6823      	ldr	r3, [r4, #0]
 80046e8:	0699      	lsls	r1, r3, #26
 80046ea:	bf42      	ittt	mi
 80046ec:	6833      	ldrmi	r3, [r6, #0]
 80046ee:	3302      	addmi	r3, #2
 80046f0:	6033      	strmi	r3, [r6, #0]
 80046f2:	6825      	ldr	r5, [r4, #0]
 80046f4:	f015 0506 	ands.w	r5, r5, #6
 80046f8:	d106      	bne.n	8004708 <_printf_common+0x48>
 80046fa:	f104 0a19 	add.w	sl, r4, #25
 80046fe:	68e3      	ldr	r3, [r4, #12]
 8004700:	6832      	ldr	r2, [r6, #0]
 8004702:	1a9b      	subs	r3, r3, r2
 8004704:	42ab      	cmp	r3, r5
 8004706:	dc28      	bgt.n	800475a <_printf_common+0x9a>
 8004708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800470c:	1e13      	subs	r3, r2, #0
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	bf18      	it	ne
 8004712:	2301      	movne	r3, #1
 8004714:	0692      	lsls	r2, r2, #26
 8004716:	d42d      	bmi.n	8004774 <_printf_common+0xb4>
 8004718:	4649      	mov	r1, r9
 800471a:	4638      	mov	r0, r7
 800471c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004720:	47c0      	blx	r8
 8004722:	3001      	adds	r0, #1
 8004724:	d020      	beq.n	8004768 <_printf_common+0xa8>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	68e5      	ldr	r5, [r4, #12]
 800472a:	f003 0306 	and.w	r3, r3, #6
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf18      	it	ne
 8004732:	2500      	movne	r5, #0
 8004734:	6832      	ldr	r2, [r6, #0]
 8004736:	f04f 0600 	mov.w	r6, #0
 800473a:	68a3      	ldr	r3, [r4, #8]
 800473c:	bf08      	it	eq
 800473e:	1aad      	subeq	r5, r5, r2
 8004740:	6922      	ldr	r2, [r4, #16]
 8004742:	bf08      	it	eq
 8004744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004748:	4293      	cmp	r3, r2
 800474a:	bfc4      	itt	gt
 800474c:	1a9b      	subgt	r3, r3, r2
 800474e:	18ed      	addgt	r5, r5, r3
 8004750:	341a      	adds	r4, #26
 8004752:	42b5      	cmp	r5, r6
 8004754:	d11a      	bne.n	800478c <_printf_common+0xcc>
 8004756:	2000      	movs	r0, #0
 8004758:	e008      	b.n	800476c <_printf_common+0xac>
 800475a:	2301      	movs	r3, #1
 800475c:	4652      	mov	r2, sl
 800475e:	4649      	mov	r1, r9
 8004760:	4638      	mov	r0, r7
 8004762:	47c0      	blx	r8
 8004764:	3001      	adds	r0, #1
 8004766:	d103      	bne.n	8004770 <_printf_common+0xb0>
 8004768:	f04f 30ff 	mov.w	r0, #4294967295
 800476c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004770:	3501      	adds	r5, #1
 8004772:	e7c4      	b.n	80046fe <_printf_common+0x3e>
 8004774:	2030      	movs	r0, #48	; 0x30
 8004776:	18e1      	adds	r1, r4, r3
 8004778:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800477c:	1c5a      	adds	r2, r3, #1
 800477e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004782:	4422      	add	r2, r4
 8004784:	3302      	adds	r3, #2
 8004786:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800478a:	e7c5      	b.n	8004718 <_printf_common+0x58>
 800478c:	2301      	movs	r3, #1
 800478e:	4622      	mov	r2, r4
 8004790:	4649      	mov	r1, r9
 8004792:	4638      	mov	r0, r7
 8004794:	47c0      	blx	r8
 8004796:	3001      	adds	r0, #1
 8004798:	d0e6      	beq.n	8004768 <_printf_common+0xa8>
 800479a:	3601      	adds	r6, #1
 800479c:	e7d9      	b.n	8004752 <_printf_common+0x92>
	...

080047a0 <_printf_i>:
 80047a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	460c      	mov	r4, r1
 80047a6:	7e27      	ldrb	r7, [r4, #24]
 80047a8:	4691      	mov	r9, r2
 80047aa:	2f78      	cmp	r7, #120	; 0x78
 80047ac:	4680      	mov	r8, r0
 80047ae:	469a      	mov	sl, r3
 80047b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047b6:	d807      	bhi.n	80047c8 <_printf_i+0x28>
 80047b8:	2f62      	cmp	r7, #98	; 0x62
 80047ba:	d80a      	bhi.n	80047d2 <_printf_i+0x32>
 80047bc:	2f00      	cmp	r7, #0
 80047be:	f000 80d9 	beq.w	8004974 <_printf_i+0x1d4>
 80047c2:	2f58      	cmp	r7, #88	; 0x58
 80047c4:	f000 80a4 	beq.w	8004910 <_printf_i+0x170>
 80047c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047d0:	e03a      	b.n	8004848 <_printf_i+0xa8>
 80047d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047d6:	2b15      	cmp	r3, #21
 80047d8:	d8f6      	bhi.n	80047c8 <_printf_i+0x28>
 80047da:	a001      	add	r0, pc, #4	; (adr r0, 80047e0 <_printf_i+0x40>)
 80047dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047e0:	08004839 	.word	0x08004839
 80047e4:	0800484d 	.word	0x0800484d
 80047e8:	080047c9 	.word	0x080047c9
 80047ec:	080047c9 	.word	0x080047c9
 80047f0:	080047c9 	.word	0x080047c9
 80047f4:	080047c9 	.word	0x080047c9
 80047f8:	0800484d 	.word	0x0800484d
 80047fc:	080047c9 	.word	0x080047c9
 8004800:	080047c9 	.word	0x080047c9
 8004804:	080047c9 	.word	0x080047c9
 8004808:	080047c9 	.word	0x080047c9
 800480c:	0800495b 	.word	0x0800495b
 8004810:	0800487d 	.word	0x0800487d
 8004814:	0800493d 	.word	0x0800493d
 8004818:	080047c9 	.word	0x080047c9
 800481c:	080047c9 	.word	0x080047c9
 8004820:	0800497d 	.word	0x0800497d
 8004824:	080047c9 	.word	0x080047c9
 8004828:	0800487d 	.word	0x0800487d
 800482c:	080047c9 	.word	0x080047c9
 8004830:	080047c9 	.word	0x080047c9
 8004834:	08004945 	.word	0x08004945
 8004838:	680b      	ldr	r3, [r1, #0]
 800483a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800483e:	1d1a      	adds	r2, r3, #4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	600a      	str	r2, [r1, #0]
 8004844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004848:	2301      	movs	r3, #1
 800484a:	e0a4      	b.n	8004996 <_printf_i+0x1f6>
 800484c:	6825      	ldr	r5, [r4, #0]
 800484e:	6808      	ldr	r0, [r1, #0]
 8004850:	062e      	lsls	r6, r5, #24
 8004852:	f100 0304 	add.w	r3, r0, #4
 8004856:	d50a      	bpl.n	800486e <_printf_i+0xce>
 8004858:	6805      	ldr	r5, [r0, #0]
 800485a:	600b      	str	r3, [r1, #0]
 800485c:	2d00      	cmp	r5, #0
 800485e:	da03      	bge.n	8004868 <_printf_i+0xc8>
 8004860:	232d      	movs	r3, #45	; 0x2d
 8004862:	426d      	negs	r5, r5
 8004864:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004868:	230a      	movs	r3, #10
 800486a:	485e      	ldr	r0, [pc, #376]	; (80049e4 <_printf_i+0x244>)
 800486c:	e019      	b.n	80048a2 <_printf_i+0x102>
 800486e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004872:	6805      	ldr	r5, [r0, #0]
 8004874:	600b      	str	r3, [r1, #0]
 8004876:	bf18      	it	ne
 8004878:	b22d      	sxthne	r5, r5
 800487a:	e7ef      	b.n	800485c <_printf_i+0xbc>
 800487c:	680b      	ldr	r3, [r1, #0]
 800487e:	6825      	ldr	r5, [r4, #0]
 8004880:	1d18      	adds	r0, r3, #4
 8004882:	6008      	str	r0, [r1, #0]
 8004884:	0628      	lsls	r0, r5, #24
 8004886:	d501      	bpl.n	800488c <_printf_i+0xec>
 8004888:	681d      	ldr	r5, [r3, #0]
 800488a:	e002      	b.n	8004892 <_printf_i+0xf2>
 800488c:	0669      	lsls	r1, r5, #25
 800488e:	d5fb      	bpl.n	8004888 <_printf_i+0xe8>
 8004890:	881d      	ldrh	r5, [r3, #0]
 8004892:	2f6f      	cmp	r7, #111	; 0x6f
 8004894:	bf0c      	ite	eq
 8004896:	2308      	moveq	r3, #8
 8004898:	230a      	movne	r3, #10
 800489a:	4852      	ldr	r0, [pc, #328]	; (80049e4 <_printf_i+0x244>)
 800489c:	2100      	movs	r1, #0
 800489e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048a2:	6866      	ldr	r6, [r4, #4]
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	bfa8      	it	ge
 80048a8:	6821      	ldrge	r1, [r4, #0]
 80048aa:	60a6      	str	r6, [r4, #8]
 80048ac:	bfa4      	itt	ge
 80048ae:	f021 0104 	bicge.w	r1, r1, #4
 80048b2:	6021      	strge	r1, [r4, #0]
 80048b4:	b90d      	cbnz	r5, 80048ba <_printf_i+0x11a>
 80048b6:	2e00      	cmp	r6, #0
 80048b8:	d04d      	beq.n	8004956 <_printf_i+0x1b6>
 80048ba:	4616      	mov	r6, r2
 80048bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80048c0:	fb03 5711 	mls	r7, r3, r1, r5
 80048c4:	5dc7      	ldrb	r7, [r0, r7]
 80048c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ca:	462f      	mov	r7, r5
 80048cc:	42bb      	cmp	r3, r7
 80048ce:	460d      	mov	r5, r1
 80048d0:	d9f4      	bls.n	80048bc <_printf_i+0x11c>
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d10b      	bne.n	80048ee <_printf_i+0x14e>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	07df      	lsls	r7, r3, #31
 80048da:	d508      	bpl.n	80048ee <_printf_i+0x14e>
 80048dc:	6923      	ldr	r3, [r4, #16]
 80048de:	6861      	ldr	r1, [r4, #4]
 80048e0:	4299      	cmp	r1, r3
 80048e2:	bfde      	ittt	le
 80048e4:	2330      	movle	r3, #48	; 0x30
 80048e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048ee:	1b92      	subs	r2, r2, r6
 80048f0:	6122      	str	r2, [r4, #16]
 80048f2:	464b      	mov	r3, r9
 80048f4:	4621      	mov	r1, r4
 80048f6:	4640      	mov	r0, r8
 80048f8:	f8cd a000 	str.w	sl, [sp]
 80048fc:	aa03      	add	r2, sp, #12
 80048fe:	f7ff fedf 	bl	80046c0 <_printf_common>
 8004902:	3001      	adds	r0, #1
 8004904:	d14c      	bne.n	80049a0 <_printf_i+0x200>
 8004906:	f04f 30ff 	mov.w	r0, #4294967295
 800490a:	b004      	add	sp, #16
 800490c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004910:	4834      	ldr	r0, [pc, #208]	; (80049e4 <_printf_i+0x244>)
 8004912:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004916:	680e      	ldr	r6, [r1, #0]
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	f856 5b04 	ldr.w	r5, [r6], #4
 800491e:	061f      	lsls	r7, r3, #24
 8004920:	600e      	str	r6, [r1, #0]
 8004922:	d514      	bpl.n	800494e <_printf_i+0x1ae>
 8004924:	07d9      	lsls	r1, r3, #31
 8004926:	bf44      	itt	mi
 8004928:	f043 0320 	orrmi.w	r3, r3, #32
 800492c:	6023      	strmi	r3, [r4, #0]
 800492e:	b91d      	cbnz	r5, 8004938 <_printf_i+0x198>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f023 0320 	bic.w	r3, r3, #32
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	2310      	movs	r3, #16
 800493a:	e7af      	b.n	800489c <_printf_i+0xfc>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	f043 0320 	orr.w	r3, r3, #32
 8004942:	6023      	str	r3, [r4, #0]
 8004944:	2378      	movs	r3, #120	; 0x78
 8004946:	4828      	ldr	r0, [pc, #160]	; (80049e8 <_printf_i+0x248>)
 8004948:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800494c:	e7e3      	b.n	8004916 <_printf_i+0x176>
 800494e:	065e      	lsls	r6, r3, #25
 8004950:	bf48      	it	mi
 8004952:	b2ad      	uxthmi	r5, r5
 8004954:	e7e6      	b.n	8004924 <_printf_i+0x184>
 8004956:	4616      	mov	r6, r2
 8004958:	e7bb      	b.n	80048d2 <_printf_i+0x132>
 800495a:	680b      	ldr	r3, [r1, #0]
 800495c:	6826      	ldr	r6, [r4, #0]
 800495e:	1d1d      	adds	r5, r3, #4
 8004960:	6960      	ldr	r0, [r4, #20]
 8004962:	600d      	str	r5, [r1, #0]
 8004964:	0635      	lsls	r5, r6, #24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	d501      	bpl.n	800496e <_printf_i+0x1ce>
 800496a:	6018      	str	r0, [r3, #0]
 800496c:	e002      	b.n	8004974 <_printf_i+0x1d4>
 800496e:	0671      	lsls	r1, r6, #25
 8004970:	d5fb      	bpl.n	800496a <_printf_i+0x1ca>
 8004972:	8018      	strh	r0, [r3, #0]
 8004974:	2300      	movs	r3, #0
 8004976:	4616      	mov	r6, r2
 8004978:	6123      	str	r3, [r4, #16]
 800497a:	e7ba      	b.n	80048f2 <_printf_i+0x152>
 800497c:	680b      	ldr	r3, [r1, #0]
 800497e:	1d1a      	adds	r2, r3, #4
 8004980:	600a      	str	r2, [r1, #0]
 8004982:	681e      	ldr	r6, [r3, #0]
 8004984:	2100      	movs	r1, #0
 8004986:	4630      	mov	r0, r6
 8004988:	6862      	ldr	r2, [r4, #4]
 800498a:	f000 fa9d 	bl	8004ec8 <memchr>
 800498e:	b108      	cbz	r0, 8004994 <_printf_i+0x1f4>
 8004990:	1b80      	subs	r0, r0, r6
 8004992:	6060      	str	r0, [r4, #4]
 8004994:	6863      	ldr	r3, [r4, #4]
 8004996:	6123      	str	r3, [r4, #16]
 8004998:	2300      	movs	r3, #0
 800499a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499e:	e7a8      	b.n	80048f2 <_printf_i+0x152>
 80049a0:	4632      	mov	r2, r6
 80049a2:	4649      	mov	r1, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	47d0      	blx	sl
 80049aa:	3001      	adds	r0, #1
 80049ac:	d0ab      	beq.n	8004906 <_printf_i+0x166>
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	079b      	lsls	r3, r3, #30
 80049b2:	d413      	bmi.n	80049dc <_printf_i+0x23c>
 80049b4:	68e0      	ldr	r0, [r4, #12]
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	4298      	cmp	r0, r3
 80049ba:	bfb8      	it	lt
 80049bc:	4618      	movlt	r0, r3
 80049be:	e7a4      	b.n	800490a <_printf_i+0x16a>
 80049c0:	2301      	movs	r3, #1
 80049c2:	4632      	mov	r2, r6
 80049c4:	4649      	mov	r1, r9
 80049c6:	4640      	mov	r0, r8
 80049c8:	47d0      	blx	sl
 80049ca:	3001      	adds	r0, #1
 80049cc:	d09b      	beq.n	8004906 <_printf_i+0x166>
 80049ce:	3501      	adds	r5, #1
 80049d0:	68e3      	ldr	r3, [r4, #12]
 80049d2:	9903      	ldr	r1, [sp, #12]
 80049d4:	1a5b      	subs	r3, r3, r1
 80049d6:	42ab      	cmp	r3, r5
 80049d8:	dcf2      	bgt.n	80049c0 <_printf_i+0x220>
 80049da:	e7eb      	b.n	80049b4 <_printf_i+0x214>
 80049dc:	2500      	movs	r5, #0
 80049de:	f104 0619 	add.w	r6, r4, #25
 80049e2:	e7f5      	b.n	80049d0 <_printf_i+0x230>
 80049e4:	080050c5 	.word	0x080050c5
 80049e8:	080050d6 	.word	0x080050d6

080049ec <_sbrk_r>:
 80049ec:	b538      	push	{r3, r4, r5, lr}
 80049ee:	2300      	movs	r3, #0
 80049f0:	4d05      	ldr	r5, [pc, #20]	; (8004a08 <_sbrk_r+0x1c>)
 80049f2:	4604      	mov	r4, r0
 80049f4:	4608      	mov	r0, r1
 80049f6:	602b      	str	r3, [r5, #0]
 80049f8:	f7fc fb44 	bl	8001084 <_sbrk>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_sbrk_r+0x1a>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_sbrk_r+0x1a>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	2000024c 	.word	0x2000024c

08004a0c <__sread>:
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	460c      	mov	r4, r1
 8004a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a14:	f000 fabe 	bl	8004f94 <_read_r>
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	bfab      	itete	ge
 8004a1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a20:	181b      	addge	r3, r3, r0
 8004a22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a26:	bfac      	ite	ge
 8004a28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a2a:	81a3      	strhlt	r3, [r4, #12]
 8004a2c:	bd10      	pop	{r4, pc}

08004a2e <__swrite>:
 8004a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a32:	461f      	mov	r7, r3
 8004a34:	898b      	ldrh	r3, [r1, #12]
 8004a36:	4605      	mov	r5, r0
 8004a38:	05db      	lsls	r3, r3, #23
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	d505      	bpl.n	8004a4c <__swrite+0x1e>
 8004a40:	2302      	movs	r3, #2
 8004a42:	2200      	movs	r2, #0
 8004a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a48:	f000 f9c8 	bl	8004ddc <_lseek_r>
 8004a4c:	89a3      	ldrh	r3, [r4, #12]
 8004a4e:	4632      	mov	r2, r6
 8004a50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a54:	81a3      	strh	r3, [r4, #12]
 8004a56:	4628      	mov	r0, r5
 8004a58:	463b      	mov	r3, r7
 8004a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a62:	f000 b869 	b.w	8004b38 <_write_r>

08004a66 <__sseek>:
 8004a66:	b510      	push	{r4, lr}
 8004a68:	460c      	mov	r4, r1
 8004a6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a6e:	f000 f9b5 	bl	8004ddc <_lseek_r>
 8004a72:	1c43      	adds	r3, r0, #1
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	bf15      	itete	ne
 8004a78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a82:	81a3      	strheq	r3, [r4, #12]
 8004a84:	bf18      	it	ne
 8004a86:	81a3      	strhne	r3, [r4, #12]
 8004a88:	bd10      	pop	{r4, pc}

08004a8a <__sclose>:
 8004a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8e:	f000 b8d3 	b.w	8004c38 <_close_r>
	...

08004a94 <__swbuf_r>:
 8004a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a96:	460e      	mov	r6, r1
 8004a98:	4614      	mov	r4, r2
 8004a9a:	4605      	mov	r5, r0
 8004a9c:	b118      	cbz	r0, 8004aa6 <__swbuf_r+0x12>
 8004a9e:	6983      	ldr	r3, [r0, #24]
 8004aa0:	b90b      	cbnz	r3, 8004aa6 <__swbuf_r+0x12>
 8004aa2:	f7ff fbbb 	bl	800421c <__sinit>
 8004aa6:	4b21      	ldr	r3, [pc, #132]	; (8004b2c <__swbuf_r+0x98>)
 8004aa8:	429c      	cmp	r4, r3
 8004aaa:	d12b      	bne.n	8004b04 <__swbuf_r+0x70>
 8004aac:	686c      	ldr	r4, [r5, #4]
 8004aae:	69a3      	ldr	r3, [r4, #24]
 8004ab0:	60a3      	str	r3, [r4, #8]
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	071a      	lsls	r2, r3, #28
 8004ab6:	d52f      	bpl.n	8004b18 <__swbuf_r+0x84>
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	b36b      	cbz	r3, 8004b18 <__swbuf_r+0x84>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	6820      	ldr	r0, [r4, #0]
 8004ac0:	b2f6      	uxtb	r6, r6
 8004ac2:	1ac0      	subs	r0, r0, r3
 8004ac4:	6963      	ldr	r3, [r4, #20]
 8004ac6:	4637      	mov	r7, r6
 8004ac8:	4283      	cmp	r3, r0
 8004aca:	dc04      	bgt.n	8004ad6 <__swbuf_r+0x42>
 8004acc:	4621      	mov	r1, r4
 8004ace:	4628      	mov	r0, r5
 8004ad0:	f000 f948 	bl	8004d64 <_fflush_r>
 8004ad4:	bb30      	cbnz	r0, 8004b24 <__swbuf_r+0x90>
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	3001      	adds	r0, #1
 8004ada:	3b01      	subs	r3, #1
 8004adc:	60a3      	str	r3, [r4, #8]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	6022      	str	r2, [r4, #0]
 8004ae4:	701e      	strb	r6, [r3, #0]
 8004ae6:	6963      	ldr	r3, [r4, #20]
 8004ae8:	4283      	cmp	r3, r0
 8004aea:	d004      	beq.n	8004af6 <__swbuf_r+0x62>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	07db      	lsls	r3, r3, #31
 8004af0:	d506      	bpl.n	8004b00 <__swbuf_r+0x6c>
 8004af2:	2e0a      	cmp	r6, #10
 8004af4:	d104      	bne.n	8004b00 <__swbuf_r+0x6c>
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f933 	bl	8004d64 <_fflush_r>
 8004afe:	b988      	cbnz	r0, 8004b24 <__swbuf_r+0x90>
 8004b00:	4638      	mov	r0, r7
 8004b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b04:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <__swbuf_r+0x9c>)
 8004b06:	429c      	cmp	r4, r3
 8004b08:	d101      	bne.n	8004b0e <__swbuf_r+0x7a>
 8004b0a:	68ac      	ldr	r4, [r5, #8]
 8004b0c:	e7cf      	b.n	8004aae <__swbuf_r+0x1a>
 8004b0e:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <__swbuf_r+0xa0>)
 8004b10:	429c      	cmp	r4, r3
 8004b12:	bf08      	it	eq
 8004b14:	68ec      	ldreq	r4, [r5, #12]
 8004b16:	e7ca      	b.n	8004aae <__swbuf_r+0x1a>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 f81e 	bl	8004b5c <__swsetup_r>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d0cb      	beq.n	8004abc <__swbuf_r+0x28>
 8004b24:	f04f 37ff 	mov.w	r7, #4294967295
 8004b28:	e7ea      	b.n	8004b00 <__swbuf_r+0x6c>
 8004b2a:	bf00      	nop
 8004b2c:	08005074 	.word	0x08005074
 8004b30:	08005094 	.word	0x08005094
 8004b34:	08005054 	.word	0x08005054

08004b38 <_write_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	2200      	movs	r2, #0
 8004b42:	4d05      	ldr	r5, [pc, #20]	; (8004b58 <_write_r+0x20>)
 8004b44:	602a      	str	r2, [r5, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	f7fc fa4f 	bl	8000fea <_write>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_write_r+0x1e>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_write_r+0x1e>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	2000024c 	.word	0x2000024c

08004b5c <__swsetup_r>:
 8004b5c:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <__swsetup_r+0xcc>)
 8004b5e:	b570      	push	{r4, r5, r6, lr}
 8004b60:	681d      	ldr	r5, [r3, #0]
 8004b62:	4606      	mov	r6, r0
 8004b64:	460c      	mov	r4, r1
 8004b66:	b125      	cbz	r5, 8004b72 <__swsetup_r+0x16>
 8004b68:	69ab      	ldr	r3, [r5, #24]
 8004b6a:	b913      	cbnz	r3, 8004b72 <__swsetup_r+0x16>
 8004b6c:	4628      	mov	r0, r5
 8004b6e:	f7ff fb55 	bl	800421c <__sinit>
 8004b72:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <__swsetup_r+0xd0>)
 8004b74:	429c      	cmp	r4, r3
 8004b76:	d10f      	bne.n	8004b98 <__swsetup_r+0x3c>
 8004b78:	686c      	ldr	r4, [r5, #4]
 8004b7a:	89a3      	ldrh	r3, [r4, #12]
 8004b7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b80:	0719      	lsls	r1, r3, #28
 8004b82:	d42c      	bmi.n	8004bde <__swsetup_r+0x82>
 8004b84:	06dd      	lsls	r5, r3, #27
 8004b86:	d411      	bmi.n	8004bac <__swsetup_r+0x50>
 8004b88:	2309      	movs	r3, #9
 8004b8a:	6033      	str	r3, [r6, #0]
 8004b8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b90:	f04f 30ff 	mov.w	r0, #4294967295
 8004b94:	81a3      	strh	r3, [r4, #12]
 8004b96:	e03e      	b.n	8004c16 <__swsetup_r+0xba>
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <__swsetup_r+0xd4>)
 8004b9a:	429c      	cmp	r4, r3
 8004b9c:	d101      	bne.n	8004ba2 <__swsetup_r+0x46>
 8004b9e:	68ac      	ldr	r4, [r5, #8]
 8004ba0:	e7eb      	b.n	8004b7a <__swsetup_r+0x1e>
 8004ba2:	4b24      	ldr	r3, [pc, #144]	; (8004c34 <__swsetup_r+0xd8>)
 8004ba4:	429c      	cmp	r4, r3
 8004ba6:	bf08      	it	eq
 8004ba8:	68ec      	ldreq	r4, [r5, #12]
 8004baa:	e7e6      	b.n	8004b7a <__swsetup_r+0x1e>
 8004bac:	0758      	lsls	r0, r3, #29
 8004bae:	d512      	bpl.n	8004bd6 <__swsetup_r+0x7a>
 8004bb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bb2:	b141      	cbz	r1, 8004bc6 <__swsetup_r+0x6a>
 8004bb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004bb8:	4299      	cmp	r1, r3
 8004bba:	d002      	beq.n	8004bc2 <__swsetup_r+0x66>
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f000 f99d 	bl	8004efc <_free_r>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6363      	str	r3, [r4, #52]	; 0x34
 8004bc6:	89a3      	ldrh	r3, [r4, #12]
 8004bc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bcc:	81a3      	strh	r3, [r4, #12]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6063      	str	r3, [r4, #4]
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	f043 0308 	orr.w	r3, r3, #8
 8004bdc:	81a3      	strh	r3, [r4, #12]
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	b94b      	cbnz	r3, 8004bf6 <__swsetup_r+0x9a>
 8004be2:	89a3      	ldrh	r3, [r4, #12]
 8004be4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bec:	d003      	beq.n	8004bf6 <__swsetup_r+0x9a>
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f000 f929 	bl	8004e48 <__smakebuf_r>
 8004bf6:	89a0      	ldrh	r0, [r4, #12]
 8004bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bfc:	f010 0301 	ands.w	r3, r0, #1
 8004c00:	d00a      	beq.n	8004c18 <__swsetup_r+0xbc>
 8004c02:	2300      	movs	r3, #0
 8004c04:	60a3      	str	r3, [r4, #8]
 8004c06:	6963      	ldr	r3, [r4, #20]
 8004c08:	425b      	negs	r3, r3
 8004c0a:	61a3      	str	r3, [r4, #24]
 8004c0c:	6923      	ldr	r3, [r4, #16]
 8004c0e:	b943      	cbnz	r3, 8004c22 <__swsetup_r+0xc6>
 8004c10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c14:	d1ba      	bne.n	8004b8c <__swsetup_r+0x30>
 8004c16:	bd70      	pop	{r4, r5, r6, pc}
 8004c18:	0781      	lsls	r1, r0, #30
 8004c1a:	bf58      	it	pl
 8004c1c:	6963      	ldrpl	r3, [r4, #20]
 8004c1e:	60a3      	str	r3, [r4, #8]
 8004c20:	e7f4      	b.n	8004c0c <__swsetup_r+0xb0>
 8004c22:	2000      	movs	r0, #0
 8004c24:	e7f7      	b.n	8004c16 <__swsetup_r+0xba>
 8004c26:	bf00      	nop
 8004c28:	20000064 	.word	0x20000064
 8004c2c:	08005074 	.word	0x08005074
 8004c30:	08005094 	.word	0x08005094
 8004c34:	08005054 	.word	0x08005054

08004c38 <_close_r>:
 8004c38:	b538      	push	{r3, r4, r5, lr}
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4d05      	ldr	r5, [pc, #20]	; (8004c54 <_close_r+0x1c>)
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4608      	mov	r0, r1
 8004c42:	602b      	str	r3, [r5, #0]
 8004c44:	f7fc f9ed 	bl	8001022 <_close>
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	d102      	bne.n	8004c52 <_close_r+0x1a>
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	b103      	cbz	r3, 8004c52 <_close_r+0x1a>
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	bd38      	pop	{r3, r4, r5, pc}
 8004c54:	2000024c 	.word	0x2000024c

08004c58 <__sflush_r>:
 8004c58:	898a      	ldrh	r2, [r1, #12]
 8004c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c5e:	4605      	mov	r5, r0
 8004c60:	0710      	lsls	r0, r2, #28
 8004c62:	460c      	mov	r4, r1
 8004c64:	d458      	bmi.n	8004d18 <__sflush_r+0xc0>
 8004c66:	684b      	ldr	r3, [r1, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	dc05      	bgt.n	8004c78 <__sflush_r+0x20>
 8004c6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	dc02      	bgt.n	8004c78 <__sflush_r+0x20>
 8004c72:	2000      	movs	r0, #0
 8004c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d0f9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c84:	682f      	ldr	r7, [r5, #0]
 8004c86:	602b      	str	r3, [r5, #0]
 8004c88:	d032      	beq.n	8004cf0 <__sflush_r+0x98>
 8004c8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	075a      	lsls	r2, r3, #29
 8004c90:	d505      	bpl.n	8004c9e <__sflush_r+0x46>
 8004c92:	6863      	ldr	r3, [r4, #4]
 8004c94:	1ac0      	subs	r0, r0, r3
 8004c96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c98:	b10b      	cbz	r3, 8004c9e <__sflush_r+0x46>
 8004c9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c9c:	1ac0      	subs	r0, r0, r3
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	6a21      	ldr	r1, [r4, #32]
 8004ca8:	47b0      	blx	r6
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	89a3      	ldrh	r3, [r4, #12]
 8004cae:	d106      	bne.n	8004cbe <__sflush_r+0x66>
 8004cb0:	6829      	ldr	r1, [r5, #0]
 8004cb2:	291d      	cmp	r1, #29
 8004cb4:	d82c      	bhi.n	8004d10 <__sflush_r+0xb8>
 8004cb6:	4a2a      	ldr	r2, [pc, #168]	; (8004d60 <__sflush_r+0x108>)
 8004cb8:	40ca      	lsrs	r2, r1
 8004cba:	07d6      	lsls	r6, r2, #31
 8004cbc:	d528      	bpl.n	8004d10 <__sflush_r+0xb8>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	6062      	str	r2, [r4, #4]
 8004cc2:	6922      	ldr	r2, [r4, #16]
 8004cc4:	04d9      	lsls	r1, r3, #19
 8004cc6:	6022      	str	r2, [r4, #0]
 8004cc8:	d504      	bpl.n	8004cd4 <__sflush_r+0x7c>
 8004cca:	1c42      	adds	r2, r0, #1
 8004ccc:	d101      	bne.n	8004cd2 <__sflush_r+0x7a>
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	b903      	cbnz	r3, 8004cd4 <__sflush_r+0x7c>
 8004cd2:	6560      	str	r0, [r4, #84]	; 0x54
 8004cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd6:	602f      	str	r7, [r5, #0]
 8004cd8:	2900      	cmp	r1, #0
 8004cda:	d0ca      	beq.n	8004c72 <__sflush_r+0x1a>
 8004cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ce0:	4299      	cmp	r1, r3
 8004ce2:	d002      	beq.n	8004cea <__sflush_r+0x92>
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 f909 	bl	8004efc <_free_r>
 8004cea:	2000      	movs	r0, #0
 8004cec:	6360      	str	r0, [r4, #52]	; 0x34
 8004cee:	e7c1      	b.n	8004c74 <__sflush_r+0x1c>
 8004cf0:	6a21      	ldr	r1, [r4, #32]
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	47b0      	blx	r6
 8004cf8:	1c41      	adds	r1, r0, #1
 8004cfa:	d1c7      	bne.n	8004c8c <__sflush_r+0x34>
 8004cfc:	682b      	ldr	r3, [r5, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0c4      	beq.n	8004c8c <__sflush_r+0x34>
 8004d02:	2b1d      	cmp	r3, #29
 8004d04:	d001      	beq.n	8004d0a <__sflush_r+0xb2>
 8004d06:	2b16      	cmp	r3, #22
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0xb6>
 8004d0a:	602f      	str	r7, [r5, #0]
 8004d0c:	e7b1      	b.n	8004c72 <__sflush_r+0x1a>
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d14:	81a3      	strh	r3, [r4, #12]
 8004d16:	e7ad      	b.n	8004c74 <__sflush_r+0x1c>
 8004d18:	690f      	ldr	r7, [r1, #16]
 8004d1a:	2f00      	cmp	r7, #0
 8004d1c:	d0a9      	beq.n	8004c72 <__sflush_r+0x1a>
 8004d1e:	0793      	lsls	r3, r2, #30
 8004d20:	bf18      	it	ne
 8004d22:	2300      	movne	r3, #0
 8004d24:	680e      	ldr	r6, [r1, #0]
 8004d26:	bf08      	it	eq
 8004d28:	694b      	ldreq	r3, [r1, #20]
 8004d2a:	eba6 0807 	sub.w	r8, r6, r7
 8004d2e:	600f      	str	r7, [r1, #0]
 8004d30:	608b      	str	r3, [r1, #8]
 8004d32:	f1b8 0f00 	cmp.w	r8, #0
 8004d36:	dd9c      	ble.n	8004c72 <__sflush_r+0x1a>
 8004d38:	4643      	mov	r3, r8
 8004d3a:	463a      	mov	r2, r7
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	6a21      	ldr	r1, [r4, #32]
 8004d40:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d42:	47b0      	blx	r6
 8004d44:	2800      	cmp	r0, #0
 8004d46:	dc06      	bgt.n	8004d56 <__sflush_r+0xfe>
 8004d48:	89a3      	ldrh	r3, [r4, #12]
 8004d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d52:	81a3      	strh	r3, [r4, #12]
 8004d54:	e78e      	b.n	8004c74 <__sflush_r+0x1c>
 8004d56:	4407      	add	r7, r0
 8004d58:	eba8 0800 	sub.w	r8, r8, r0
 8004d5c:	e7e9      	b.n	8004d32 <__sflush_r+0xda>
 8004d5e:	bf00      	nop
 8004d60:	20400001 	.word	0x20400001

08004d64 <_fflush_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4605      	mov	r5, r0
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	b913      	cbnz	r3, 8004d74 <_fflush_r+0x10>
 8004d6e:	2500      	movs	r5, #0
 8004d70:	4628      	mov	r0, r5
 8004d72:	bd38      	pop	{r3, r4, r5, pc}
 8004d74:	b118      	cbz	r0, 8004d7e <_fflush_r+0x1a>
 8004d76:	6983      	ldr	r3, [r0, #24]
 8004d78:	b90b      	cbnz	r3, 8004d7e <_fflush_r+0x1a>
 8004d7a:	f7ff fa4f 	bl	800421c <__sinit>
 8004d7e:	4b14      	ldr	r3, [pc, #80]	; (8004dd0 <_fflush_r+0x6c>)
 8004d80:	429c      	cmp	r4, r3
 8004d82:	d11b      	bne.n	8004dbc <_fflush_r+0x58>
 8004d84:	686c      	ldr	r4, [r5, #4]
 8004d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ef      	beq.n	8004d6e <_fflush_r+0xa>
 8004d8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d90:	07d0      	lsls	r0, r2, #31
 8004d92:	d404      	bmi.n	8004d9e <_fflush_r+0x3a>
 8004d94:	0599      	lsls	r1, r3, #22
 8004d96:	d402      	bmi.n	8004d9e <_fflush_r+0x3a>
 8004d98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d9a:	f7ff fadd 	bl	8004358 <__retarget_lock_acquire_recursive>
 8004d9e:	4628      	mov	r0, r5
 8004da0:	4621      	mov	r1, r4
 8004da2:	f7ff ff59 	bl	8004c58 <__sflush_r>
 8004da6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004da8:	4605      	mov	r5, r0
 8004daa:	07da      	lsls	r2, r3, #31
 8004dac:	d4e0      	bmi.n	8004d70 <_fflush_r+0xc>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	059b      	lsls	r3, r3, #22
 8004db2:	d4dd      	bmi.n	8004d70 <_fflush_r+0xc>
 8004db4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004db6:	f7ff fad0 	bl	800435a <__retarget_lock_release_recursive>
 8004dba:	e7d9      	b.n	8004d70 <_fflush_r+0xc>
 8004dbc:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <_fflush_r+0x70>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d101      	bne.n	8004dc6 <_fflush_r+0x62>
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	e7df      	b.n	8004d86 <_fflush_r+0x22>
 8004dc6:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <_fflush_r+0x74>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	bf08      	it	eq
 8004dcc:	68ec      	ldreq	r4, [r5, #12]
 8004dce:	e7da      	b.n	8004d86 <_fflush_r+0x22>
 8004dd0:	08005074 	.word	0x08005074
 8004dd4:	08005094 	.word	0x08005094
 8004dd8:	08005054 	.word	0x08005054

08004ddc <_lseek_r>:
 8004ddc:	b538      	push	{r3, r4, r5, lr}
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	2200      	movs	r2, #0
 8004de6:	4d05      	ldr	r5, [pc, #20]	; (8004dfc <_lseek_r+0x20>)
 8004de8:	602a      	str	r2, [r5, #0]
 8004dea:	461a      	mov	r2, r3
 8004dec:	f7fc f93d 	bl	800106a <_lseek>
 8004df0:	1c43      	adds	r3, r0, #1
 8004df2:	d102      	bne.n	8004dfa <_lseek_r+0x1e>
 8004df4:	682b      	ldr	r3, [r5, #0]
 8004df6:	b103      	cbz	r3, 8004dfa <_lseek_r+0x1e>
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	bd38      	pop	{r3, r4, r5, pc}
 8004dfc:	2000024c 	.word	0x2000024c

08004e00 <__swhatbuf_r>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	460e      	mov	r6, r1
 8004e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e08:	4614      	mov	r4, r2
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	461d      	mov	r5, r3
 8004e0e:	b096      	sub	sp, #88	; 0x58
 8004e10:	da07      	bge.n	8004e22 <__swhatbuf_r+0x22>
 8004e12:	2300      	movs	r3, #0
 8004e14:	602b      	str	r3, [r5, #0]
 8004e16:	89b3      	ldrh	r3, [r6, #12]
 8004e18:	061a      	lsls	r2, r3, #24
 8004e1a:	d410      	bmi.n	8004e3e <__swhatbuf_r+0x3e>
 8004e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e20:	e00e      	b.n	8004e40 <__swhatbuf_r+0x40>
 8004e22:	466a      	mov	r2, sp
 8004e24:	f000 f8c8 	bl	8004fb8 <_fstat_r>
 8004e28:	2800      	cmp	r0, #0
 8004e2a:	dbf2      	blt.n	8004e12 <__swhatbuf_r+0x12>
 8004e2c:	9a01      	ldr	r2, [sp, #4]
 8004e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e36:	425a      	negs	r2, r3
 8004e38:	415a      	adcs	r2, r3
 8004e3a:	602a      	str	r2, [r5, #0]
 8004e3c:	e7ee      	b.n	8004e1c <__swhatbuf_r+0x1c>
 8004e3e:	2340      	movs	r3, #64	; 0x40
 8004e40:	2000      	movs	r0, #0
 8004e42:	6023      	str	r3, [r4, #0]
 8004e44:	b016      	add	sp, #88	; 0x58
 8004e46:	bd70      	pop	{r4, r5, r6, pc}

08004e48 <__smakebuf_r>:
 8004e48:	898b      	ldrh	r3, [r1, #12]
 8004e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e4c:	079d      	lsls	r5, r3, #30
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460c      	mov	r4, r1
 8004e52:	d507      	bpl.n	8004e64 <__smakebuf_r+0x1c>
 8004e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	6123      	str	r3, [r4, #16]
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	6163      	str	r3, [r4, #20]
 8004e60:	b002      	add	sp, #8
 8004e62:	bd70      	pop	{r4, r5, r6, pc}
 8004e64:	466a      	mov	r2, sp
 8004e66:	ab01      	add	r3, sp, #4
 8004e68:	f7ff ffca 	bl	8004e00 <__swhatbuf_r>
 8004e6c:	9900      	ldr	r1, [sp, #0]
 8004e6e:	4605      	mov	r5, r0
 8004e70:	4630      	mov	r0, r6
 8004e72:	f7ff fa73 	bl	800435c <_malloc_r>
 8004e76:	b948      	cbnz	r0, 8004e8c <__smakebuf_r+0x44>
 8004e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e7c:	059a      	lsls	r2, r3, #22
 8004e7e:	d4ef      	bmi.n	8004e60 <__smakebuf_r+0x18>
 8004e80:	f023 0303 	bic.w	r3, r3, #3
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	81a3      	strh	r3, [r4, #12]
 8004e8a:	e7e3      	b.n	8004e54 <__smakebuf_r+0xc>
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <__smakebuf_r+0x7c>)
 8004e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	6020      	str	r0, [r4, #0]
 8004e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e98:	81a3      	strh	r3, [r4, #12]
 8004e9a:	9b00      	ldr	r3, [sp, #0]
 8004e9c:	6120      	str	r0, [r4, #16]
 8004e9e:	6163      	str	r3, [r4, #20]
 8004ea0:	9b01      	ldr	r3, [sp, #4]
 8004ea2:	b15b      	cbz	r3, 8004ebc <__smakebuf_r+0x74>
 8004ea4:	4630      	mov	r0, r6
 8004ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004eaa:	f000 f897 	bl	8004fdc <_isatty_r>
 8004eae:	b128      	cbz	r0, 8004ebc <__smakebuf_r+0x74>
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	81a3      	strh	r3, [r4, #12]
 8004ebc:	89a0      	ldrh	r0, [r4, #12]
 8004ebe:	4305      	orrs	r5, r0
 8004ec0:	81a5      	strh	r5, [r4, #12]
 8004ec2:	e7cd      	b.n	8004e60 <__smakebuf_r+0x18>
 8004ec4:	080041b5 	.word	0x080041b5

08004ec8 <memchr>:
 8004ec8:	4603      	mov	r3, r0
 8004eca:	b510      	push	{r4, lr}
 8004ecc:	b2c9      	uxtb	r1, r1
 8004ece:	4402      	add	r2, r0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	d101      	bne.n	8004eda <memchr+0x12>
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	e003      	b.n	8004ee2 <memchr+0x1a>
 8004eda:	7804      	ldrb	r4, [r0, #0]
 8004edc:	3301      	adds	r3, #1
 8004ede:	428c      	cmp	r4, r1
 8004ee0:	d1f6      	bne.n	8004ed0 <memchr+0x8>
 8004ee2:	bd10      	pop	{r4, pc}

08004ee4 <__malloc_lock>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__malloc_lock+0x8>)
 8004ee6:	f7ff ba37 	b.w	8004358 <__retarget_lock_acquire_recursive>
 8004eea:	bf00      	nop
 8004eec:	20000244 	.word	0x20000244

08004ef0 <__malloc_unlock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_unlock+0x8>)
 8004ef2:	f7ff ba32 	b.w	800435a <__retarget_lock_release_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20000244 	.word	0x20000244

08004efc <_free_r>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4605      	mov	r5, r0
 8004f00:	2900      	cmp	r1, #0
 8004f02:	d043      	beq.n	8004f8c <_free_r+0x90>
 8004f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f08:	1f0c      	subs	r4, r1, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	bfb8      	it	lt
 8004f0e:	18e4      	addlt	r4, r4, r3
 8004f10:	f7ff ffe8 	bl	8004ee4 <__malloc_lock>
 8004f14:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <_free_r+0x94>)
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	4610      	mov	r0, r2
 8004f1a:	b933      	cbnz	r3, 8004f2a <_free_r+0x2e>
 8004f1c:	6063      	str	r3, [r4, #4]
 8004f1e:	6014      	str	r4, [r2, #0]
 8004f20:	4628      	mov	r0, r5
 8004f22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f26:	f7ff bfe3 	b.w	8004ef0 <__malloc_unlock>
 8004f2a:	42a3      	cmp	r3, r4
 8004f2c:	d90a      	bls.n	8004f44 <_free_r+0x48>
 8004f2e:	6821      	ldr	r1, [r4, #0]
 8004f30:	1862      	adds	r2, r4, r1
 8004f32:	4293      	cmp	r3, r2
 8004f34:	bf01      	itttt	eq
 8004f36:	681a      	ldreq	r2, [r3, #0]
 8004f38:	685b      	ldreq	r3, [r3, #4]
 8004f3a:	1852      	addeq	r2, r2, r1
 8004f3c:	6022      	streq	r2, [r4, #0]
 8004f3e:	6063      	str	r3, [r4, #4]
 8004f40:	6004      	str	r4, [r0, #0]
 8004f42:	e7ed      	b.n	8004f20 <_free_r+0x24>
 8004f44:	461a      	mov	r2, r3
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	b10b      	cbz	r3, 8004f4e <_free_r+0x52>
 8004f4a:	42a3      	cmp	r3, r4
 8004f4c:	d9fa      	bls.n	8004f44 <_free_r+0x48>
 8004f4e:	6811      	ldr	r1, [r2, #0]
 8004f50:	1850      	adds	r0, r2, r1
 8004f52:	42a0      	cmp	r0, r4
 8004f54:	d10b      	bne.n	8004f6e <_free_r+0x72>
 8004f56:	6820      	ldr	r0, [r4, #0]
 8004f58:	4401      	add	r1, r0
 8004f5a:	1850      	adds	r0, r2, r1
 8004f5c:	4283      	cmp	r3, r0
 8004f5e:	6011      	str	r1, [r2, #0]
 8004f60:	d1de      	bne.n	8004f20 <_free_r+0x24>
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	4401      	add	r1, r0
 8004f68:	6011      	str	r1, [r2, #0]
 8004f6a:	6053      	str	r3, [r2, #4]
 8004f6c:	e7d8      	b.n	8004f20 <_free_r+0x24>
 8004f6e:	d902      	bls.n	8004f76 <_free_r+0x7a>
 8004f70:	230c      	movs	r3, #12
 8004f72:	602b      	str	r3, [r5, #0]
 8004f74:	e7d4      	b.n	8004f20 <_free_r+0x24>
 8004f76:	6820      	ldr	r0, [r4, #0]
 8004f78:	1821      	adds	r1, r4, r0
 8004f7a:	428b      	cmp	r3, r1
 8004f7c:	bf01      	itttt	eq
 8004f7e:	6819      	ldreq	r1, [r3, #0]
 8004f80:	685b      	ldreq	r3, [r3, #4]
 8004f82:	1809      	addeq	r1, r1, r0
 8004f84:	6021      	streq	r1, [r4, #0]
 8004f86:	6063      	str	r3, [r4, #4]
 8004f88:	6054      	str	r4, [r2, #4]
 8004f8a:	e7c9      	b.n	8004f20 <_free_r+0x24>
 8004f8c:	bd38      	pop	{r3, r4, r5, pc}
 8004f8e:	bf00      	nop
 8004f90:	200000ec 	.word	0x200000ec

08004f94 <_read_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	4611      	mov	r1, r2
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4d05      	ldr	r5, [pc, #20]	; (8004fb4 <_read_r+0x20>)
 8004fa0:	602a      	str	r2, [r5, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f7fc f804 	bl	8000fb0 <_read>
 8004fa8:	1c43      	adds	r3, r0, #1
 8004faa:	d102      	bne.n	8004fb2 <_read_r+0x1e>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	b103      	cbz	r3, 8004fb2 <_read_r+0x1e>
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	bd38      	pop	{r3, r4, r5, pc}
 8004fb4:	2000024c 	.word	0x2000024c

08004fb8 <_fstat_r>:
 8004fb8:	b538      	push	{r3, r4, r5, lr}
 8004fba:	2300      	movs	r3, #0
 8004fbc:	4d06      	ldr	r5, [pc, #24]	; (8004fd8 <_fstat_r+0x20>)
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	602b      	str	r3, [r5, #0]
 8004fc6:	f7fc f837 	bl	8001038 <_fstat>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	d102      	bne.n	8004fd4 <_fstat_r+0x1c>
 8004fce:	682b      	ldr	r3, [r5, #0]
 8004fd0:	b103      	cbz	r3, 8004fd4 <_fstat_r+0x1c>
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	bd38      	pop	{r3, r4, r5, pc}
 8004fd6:	bf00      	nop
 8004fd8:	2000024c 	.word	0x2000024c

08004fdc <_isatty_r>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	2300      	movs	r3, #0
 8004fe0:	4d05      	ldr	r5, [pc, #20]	; (8004ff8 <_isatty_r+0x1c>)
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4608      	mov	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc f835 	bl	8001056 <_isatty>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_isatty_r+0x1a>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_isatty_r+0x1a>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	2000024c 	.word	0x2000024c

08004ffc <_init>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr

08005008 <_fini>:
 8005008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800500a:	bf00      	nop
 800500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500e:	bc08      	pop	{r3}
 8005010:	469e      	mov	lr, r3
 8005012:	4770      	bx	lr
